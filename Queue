LOVE BABBAR

QUEUE IS A FIRST IN FIRST OUT DATA STRUCTURE 
push - at rear end/ at back
pop - from front
q.push(), q.pop(), q.empty(), q.size(), q.front()

1) IMPLEMENTATION QUEUE FROM ARRAY 
class Queue {
    int *arr;
    int qfront;
    int qrear;
    int size;
public:
    Queue() {  // CONSTRUCTOR
        size=100001;
        arr=new int[size];
        qfront=0;
        qrear=0;    
    }
    bool isEmpty() {
        if(qfront==qrear) return true;
        else return false;
    }

    void enqueue(int data) { // PUSH ELEMENT INTO QUEUE
        if(qrear==size) cout<<"Queue is full"<<endl;
        else{
            arr[qrear]=data;
            qrear++;
        }
    }

    int dequeue() { // removes element from front of queue and returns element being removed
        if(qfront==qrear) return -1;
        else{
            int ans=arr[qfront];
            arr[qfront]=-1; // make it empty
            qfront++;
            if(qfront==qrear){  // for single element
                qfront=0;
                qrear=0;
            }
            return ans;
        }
    }

    int front() {
        if(qfront==qrear) return -1;
        return arr[qfront];
    }
};

2) IMPLEMENTATION OF CIRCULAR QUEUE FROM ARRAY
class CircularQueue{
    public:
    int* arr;
    int front;
    int rear;
    int size;
    int count;
    CircularQueue(int n){  // CONSTRUCTOR
        size = n;
        arr = new int[size];
        front = 0;
        rear = 0;
        count = 0;
    }
    //Returns true if it gets pushed into the stack, and false otherwise.
    bool enqueue(int value){
        if(count == size){
            return false;
        }
        else{
            arr[rear] = value;
            rear = (rear+1)%size;
            count++;
            return true;
        }
    }

    // Dequeues top element from queue. Returns -1 if the stack is empty, otherwise returns the popped element.
    int dequeue(){
        int ans;
        if(count == 0){
            return -1;
        }
        else{
            ans = arr[front];
            arr[front] = -1;
            front = (front+1)%size;
            count--;
        }
        return ans;
    }
};

3) IMPLEMENT DEQUE

class Deque {
   int *arr;
   int size, frnt, rear;

public:

Deque(int n) {
    size = n;
    arr = new int[n];
    frnt = rear = -1;
}

bool pushFront(int x) {
    if ((frnt == 0 && rear == size - 1) || (rear == (frnt - 1))) return 0;   // if(isFull())
    if (frnt == -1) frnt = rear = 0;
    else if (frnt == 0 && rear != size - 1) frnt = size - 1;
    else frnt--;
    arr[frnt] = x;
    return 1;
   }

bool pushRear(int x) {
    if ((frnt == 0 && rear == size - 1) || (rear == (frnt - 1))) return 0;    // if(isFull())
    if (frnt == -1) frnt = rear = 0;
    else if (rear == size - 1 && frnt != 0) rear = 0;
    else rear++;
    arr[rear] = x;
    return 1;
   }

int popFront() {
    if (frnt == -1) return -1;       // if(isEmpty())
    int val = arr[frnt];
    if (frnt == rear) frnt = rear = -1; // single element
    else if (frnt == size - 1) frnt = 0;
    else frnt++;
    return val;
   }

int popRear() {
    if (frnt == -1)  return -1;    // if(isEmpty())
    int val = arr[rear];
    if (frnt == rear) frnt = rear = -1;
    else if (rear == 0) rear = size - 1;
    else rear--;
    return val;
   }

int getFront() {
    return (frnt == -1)?-1:arr[frnt];
   }

int getRear() {
    return (rear == -1)?-1:arr[rear];
   }
   
bool isEmpty() {
    return frnt==-1;
   }
   
bool isFull() {
    return ((frnt == 0 && rear == size - 1) || (rear == (frnt - 1)));
   }
};

4) REVERSE QUEUE USING RECURSION
void solve(queue<int>&q){
        if(q.empty()) return;
        int num=q.front();
        q.pop();
        solve(q);
        q.push(num);
    }
    queue<int> rev(queue<int> q){
       if(q.size()<2) return q;
       solve(q);
       return q;
    }
TC - O(N)
SC - O(N)
FOR ITERATIVE METHOD INSERT INTO STACK

5) First negative integer in every window of size k
vector<long long> printFirstNegativeInteger(long long int A[], long long int N, long long int K) {
      vector<long long> ans;
      deque<long long int> dq;
      //insert all window elements which is less than 0
      for(int i = 0; i < K; i++ ){
          if(A[i] < 0){
              dq.push_back(i);
          }
      }
      //get ans if dq contains elment
      if(dq.size() > 0){
          ans.push_back(A[dq.front()]);
      }
      //else add 0 ton ans 
      else{
          ans.push_back(0);
      }
    //   processing for remaining elements
    for(int i = K ; i < N; i++ ){
      //removal of elements 
      if(!dq.empty() && (i - dq.front()) >= K){
            dq.pop_front();
        }
      // addition of element
      if(A[i] < 0){
              dq.push_back(i);
          }
      //get ans if dq contains elment
      if(dq.size() > 0){
          ans.push_back(A[dq.front()]);
      }
      //else add 0 ton ans 
      else{
          ans.push_back(0);
      }
    }
      return ans;
 }
TC - O(N)
SC - O(K)

6) REVERSE FIRST K ELEMENTS OF A QUEUE
 void reverse(vector<int> &v, int k){// function to reverse first k element of array
        int e = k-1;
        int s = 0;
        while(s<=e){
            swap(v[s],v[e]);
            s++,e--;
        }
    }
    
    // Function to reverse first k elements of a queue.
    queue<int> modifyQueue(queue<int> q, int k) {
        vector<int> v;
        while(!q.empty()){// push all element of queue into vector
            v.push_back(q.front());
            q.pop();
        }
        reverse(v,k);
        for(int i=0; i<v.size(); i++){// 
            q.push(v[i]);
        }
        return q;
    }
also can use a stack & queue
TC - O(N)
SC - O(K)

7) First non-repeating character in a stream
string FirstNonRepeating(string str){
            int freq[26] = {0};
            queue<char>que;
            string ans = "";
            for( int i = 0 ; i < str.length() ; i++){
                freq[str[i]-'a']++;
                if( freq[str[i]-'a'] == 1){
                    que.push(str[i]);
                }
                // remove all the element from the begining of queue which are having frequency greater than 1
                while(que.empty() == false && freq[que.front()-'a'] > 1){
                    que.pop();
                }
                // if que is empty then append  # to answer otherwise append the character 
                if( que.empty()) ans += "#";
                else ans += que.front();
            }
            return ans;
        }
TC - O(N)
SC - O(N)

8) Circular tour
    int tour(petrolPump p[],int n){
       int deficitpetrol=0;
       int balancepetrol=0;
       int start=0;
       for(int i=0;i<n;i++){
           balancepetrol+=p[i].petrol-p[i].distance;
           if(balancepetrol<0){
               deficitpetrol+=balancepetrol;
               start=i+1;
               balancepetrol=0;
           }
       }
       if(deficitpetrol+balancepetrol>=0){
           return start;
       }
       return -1;
    }

9) https://www.geeksforgeeks.org/sum-minimum-maximum-elements-subarrays-size-k/
10) https://www.geeksforgeeks.org/efficiently-implement-k-queues-single-array/


STRIVER 
1) SLIDING WINDOW MAXIMUM
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int>ans;
        deque<int>dq;
        for(int i=0;i<nums.size();i++){
            if(!dq.empty() && dq.front()<=i-k) dq.pop_front();
            while(!dq.empty() && nums[dq.back()]<nums[i]) dq.pop_back();
            dq.push_back(i);
            if(i>=k-1) ans.push_back(nums[dq.front()]);
        }
        return ans;
    }
TC - O(N)
SC - O(K)

2) Implement LRU Cache USING HEAP & DOUBLY LINKED LIST (data structure that follows the constraints of Least Recently Used (LRU) cache)
class LRUCache {
public:
  class node {
  public:
      int key;
      int val;
      node *next;
      node *prev;
      node(int _key, int _val) {         // CONSTRUCTOR
        key = _key;
        val = _val;
      }
    };

  node * head = new node(-1, -1);
  node * tail = new node(-1, -1);

  int cap;
  unordered_map < int, node* > m;

  LRUCache(int capacity) {
    cap = capacity;
    head -> next = tail;
    tail -> prev = head;
  }

  void addnode(node * newnode) {
    node * temp = head -> next;
    newnode -> next = temp;
    newnode -> prev = head;
    head -> next = newnode;
    temp -> prev = newnode;
  }

  void deletenode(node * delnode) {
    node * delprev = delnode -> prev;
    node * delnext = delnode -> next;
    delprev -> next = delnext;
    delnext -> prev = delprev;
  }

  int get(int key_) {
    if (m.find(key_) != m.end()) {
      node * resnode = m[key_];
      int res = resnode -> val;
      m.erase(key_);
      deletenode(resnode);
      addnode(resnode);
      m[key_] = head -> next;
      return res;
    }
    return -1;
  }

  void put(int key_, int value) {
    if (m.find(key_) != m.end()) {
      node * existingnode = m[key_];
      m.erase(key_);
      deletenode(existingnode);
    }
    if (m.size() == cap) {
      m.erase(tail -> prev -> key);
      deletenode(tail -> prev);
    }
    addnode(new node(key_, value));
    m[key_] = head -> next;
  }
};

TC - O(N)
SC - O(1)

3) IMPLEMENTING LFU Cache
struct Node {
    int key, value, cnt;
    Node *next; 
    Node *prev;
    Node(int _key, int _value) {
        key = _key;
        value = _value; 
        cnt = 1; 
    }
}; 
struct List {
    int size; 
    Node *head; 
    Node *tail; 
    List() {
        head = new Node(0, 0); 
        tail = new Node(0,0); 
        head->next = tail;
        tail->prev = head; 
        size = 0;
    }
    
    void addFront(Node *node) {
        Node* temp = head->next;
        node->next = temp;
        node->prev = head;
        head->next = node;
        temp->prev = node;
        size++; 
    }
    
    void removeNode(Node* delnode) {
        Node* delprev = delnode->prev;
        Node* delnext = delnode->next;
        delprev->next = delnext;
        delnext->prev = delprev;
        size--; 
    }
};
class LFUCache {
    map<int, Node*> keyNode; 
    map<int, List*> freqListMap; 
    int maxSizeCache;
    int minFreq; 
    int curSize; 
public:
    LFUCache(int capacity) {
        maxSizeCache = capacity; 
        minFreq = 0;
        curSize = 0; 
    }
    void updateFreqListMap(Node *node) {
        keyNode.erase(node->key); 
        freqListMap[node->cnt]->removeNode(node); 
        if(node->cnt == minFreq && freqListMap[node->cnt]->size == 0) {
            minFreq++; 
        }
        
        List* nextHigherFreqList = new List();
        if(freqListMap.find(node->cnt + 1) != freqListMap.end()) {
            nextHigherFreqList = freqListMap[node->cnt + 1];
        } 
        node->cnt += 1; 
        nextHigherFreqList->addFront(node); 
        freqListMap[node->cnt] = nextHigherFreqList; 
        keyNode[node->key] = node;
    }
    
    int get(int key) {
        if(keyNode.find(key) != keyNode.end()) {
            Node* node = keyNode[key]; 
            int val = node->value; 
            updateFreqListMap(node); 
            return val; 
        }
        return -1; 
    }
    
    void put(int key, int value) {
        if (maxSizeCache == 0) {
            return;
        }
        if(keyNode.find(key) != keyNode.end()) {
            Node* node = keyNode[key]; 
            node->value = value; 
            updateFreqListMap(node); 
        }
        else {
            if(curSize == maxSizeCache) {
                List* list = freqListMap[minFreq]; 
                keyNode.erase(list->tail->prev->key); 
                freqListMap[minFreq]->removeNode(list->tail->prev);
                curSize--; 
            }
            curSize++; 
            // new value has to be added who is not there previously 
            minFreq = 1; 
            List* listFreq = new List(); 
            if(freqListMap.find(minFreq) != freqListMap.end()) {
                listFreq = freqListMap[minFreq]; 
            }
            Node* node = new Node(key, value); 
            listFreq->addFront(node);
            keyNode[key] = node; 
            freqListMap[minFreq] = listFreq; 
        }
    }
};

WATCH FIRST 4 VIDEOS OF STRIVER OF STRIVER STACK & QUEUE
