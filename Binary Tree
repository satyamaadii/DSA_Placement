root - head of tree
child 
leaf - no children
subtree- small partof tree
ancestors - parent, grand parent etc
TYPES OF BT - 1) FULL BT - EVERY NODE HAS 0 OR 2 CHILDREN
              2) COMPLETE BT - ALL LEVELS SHOULD BE COMPLETELY FILLED EXCEPT LAST LEVEL, LAST LEVEL SHOULD HAVE ALL THE NODES AS LEFT AS POSSIBLE 
              3) PERFECT BT - ALL LEAF NODES AT SAME LEVEL
              4) BALANCED BT - HEIGHT OF BT MAX LOGN
              5) DEGENERATE TREE - SKEW TREES, LIKE LINKED LIST, STRAIGHT LINE
IN WORST CASE HEIGHT OF BT = NODES OF BT , FOR DEGENEARTE BT

Representation of BT
struct Node{
       int data;
       struct Node* left;
       struct Node* right;
// declaration of particular node
       Node(int val){
            data=val;
            left=NULL;
            right=NULL;
       }
};

PREORDER TRAVERSAL (NODE LEFT RIGHT)
M-1 ITERATIVE 
vector <int> solve(Node* root){
 vector<int> preorder;
         if(root==NULL) return preorder;
         stack<Node*>st;
         st.push(root);
         while(!st.empty()){
            root = st.top();
            st.pop();
            preorder.push_back(root->data);
            if(root->right!=NULL){
                st.push(root->right);
            }
            if(root->left!=NULL){
                st.push(root->left);
            }
         }
         return preorder;
}
TC - O(N)
SC - O(N)

M-2 RECURSIVE
void solve(Node* root,vector<int> &ans){
    if(root==NULL)  return;
    ans.push_back(root->data);
    solve(root->left,ans);
    solve(root->right,ans);
}
vector <int> preorder(Node* root){
      vector<int>ans;
      solve(root,ans);
      return ans;
}
TC - O(N)
SC - O(N)

INORDER TRAVERSAL 
M-1 
    vector<int> inorderTraversal(TreeNode* root) {
        stack<TreeNode*>st;
        TreeNode* node=root;
        vector<int> inorder;
        while(true){
            if(node!=NULL){
                st.push(node);
                node=node->left;
            }
            else{
                if(st.empty()==true) break;
                node=st.top();
                st.pop();
                inorder.push_back(node->val);
                node=node->right;
            }
        }
        return inorder;
    }
TC - O(N)
SC - O(N)

M-2 
    void solve(TreeNode* root,vector<int>&vec){
         if(root==NULL)  return;
         if(root->left)  solve(root->left,vec);
         vec.push_back(root->val);
         if(root->right)  solve(root->right,vec);
    }
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int>vec;
        solve(root,vec);
        return vec;
    }
TC - O(N)
SC - O(N)

POSTORDER TRAVERSAL
M-1 ITERATIVE
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> nodes;
        stack<TreeNode*> st;
        TreeNode* last = NULL;
        while (root || !st.empty()) {
            if (root) {
                st.push(root);
                root = root -> left;
            } else {
                TreeNode* node = st.top();
                if (node -> right && last != node -> right) {
                    root = node -> right;
                } else {
                    nodes.push_back(node -> val);
                    last = node;
                    st.pop();
                }
            }
        }
        return nodes;
    }
TC - O(N)
SC - O(N)

M-2 RECURSIVE
    void solve(TreeNode* root,vector<int>&ans){
        if(root==NULL)  return;
        solve(root->left,ans);
        solve(root->right,ans);
        ans.push_back(root->val);
    }

    vector<int> postorderTraversal(TreeNode* root) {
        vector<int>ans;
        if(root==NULL)  return ans;
        solve(root,ans);
        return ans;
    }
TC - O(N)
SC - O(N)

LEVEL ORDER TRAVERSAL (BFS)
    vector<int> levelOrder(Node* root){
        vector<int> ans;
        if(root==NULL) return ans;
        queue<Node*> q;
        q.push(root);
        while(!q.empty()){
                Node *node=q.front();
                q.pop();
                if(node->left!=NULL) q.push(node->left);
                if(node->right!=NULL) q.push(node->right);
                ans.push_back(node->data);
            }
        return ans;
    }
TC - O(N)
SC - O(N)

Maximum Depth/HEIGHT in Binary Tree
  int maxDepth(TreeNode* root) {
        if(!root) return 0;
        int maxLeft = maxDepth(root->left);
        int maxRight = maxDepth(root->right);
        return max(maxLeft, maxRight)+1;
    }
TC - O(N)
SC - O(HEIGHT OF TREE)

Check for Balanced Binary Tree
   int solve(TreeNode* root){
         if(root==NULL)  return 0;
         int left=solve(root->left);
         int right=solve(root->right);
         if(abs(left-right)>1) return -1;
         if(left==-1 || right==-1) return -1;
         return max(left,right)+1;
    }
    bool isBalanced(TreeNode* root) {
         if(root==NULL)  return true;
         return (solve(root)==-1?false:true);
    }
TC - O(N)
SC - O(HEIGHT OF TREE)

Diameter of a Binary Tree
    int solve(Node* root,int &ans){
        if(root==NULL) return 0;
        int left=solve(root->left,ans);
        int right=solve(root->right,ans);
        int currHeight=max(left,right)+1;
        int tempAns=max(left+right+1, currHeight); //include root    exclude root
        ans=max(ans,tempAns);
        return currHeight;
    }
    
    int diameter(Node* root) {
        if(root==NULL)  return 0;
        int ans=INT_MIN;
        solve(root,ans);
        return ans;
    }
TC - O(N)
SC - O(HEIGHT OF TREE)

Maximum Path Sum in BT
    int solve(TreeNode* root,int& res){
        if(root==NULL)  return 0;
        int left=solve(root->left,res);
        int right=solve(root->right,res);
        int temp=max(0,max(left,right))+root->val;
        int ans=max(temp,left+right+root->val);
        res=max(res,ans);
        return temp;
    }

    int maxPathSum(TreeNode* root) {
        int res=INT_MIN;
        solve(root,res);
        return res;
    }
TC - O(N)
SC - O(HEIGHT OF TREE)

Check for identical BT
bool isIdentical(Node *r1, Node *r2){
       if(r1==NULL && r2==NULL) return 1;
       if(r1==NULL || r2==NULL || r1->data!=r2->data) return 0;
       return isIdentical(r1->left,r2->left)&&isIdentical(r1->right,r2->right);
    }
TC - O(N)
SC - O(HEIGHT OF TREE)

ZigZag / SPIRAL Tree Traversal
vector <int> zigZagTraversal(Node* root){
         vector<int>ans; 
         if(root==NULL) return ans;
         queue<Node*>q;
         q.push(root);
         bool left2right=true;
         while(!q.empty()){
             int sz=q.size();
             vector<int>temp(sz);
             for(int i=0;i<sz;i++){
                 Node* front=q.front();
                 q.pop();
                 int indx=(left2right ? i : sz-1-i );
                 temp[indx]=front->data;
                 if(front->left){
                     q.push(front->left);
                 }
                 if(front->right){
                     q.push(front->right);
                 }
             }
             left2right=!left2right;
             for(auto x: temp)
                ans.push_back(x);
         }
         return ans;         
    }
TC - O(N)
SC - O(N)

Boundary Traversal of BT
    void leftTraverse(Node* root,vector<int>&ans){
        if(root==NULL || root->left==NULL && root->right==NULL)
           return;
        ans.push_back(root->data);
        if(root->left)
           leftTraverse(root->left,ans);
        else
           leftTraverse(root->right,ans);
    }
    void rightTraverse(Node* root,vector<int>&ans){
        if(root==NULL || root->left==NULL && root->right==NULL)
           return;
        if(root->right)
          rightTraverse(root->right,ans);
        else
          rightTraverse(root->left,ans);
        ans.push_back(root->data);
    }
    void traverseLeaf(Node* root,vector<int>&ans){
        if(root==NULL) return;
        if(root->left==NULL && root->right==NULL){
            ans.push_back(root->data);
            return;
        }
        traverseLeaf(root->left,ans);
        traverseLeaf(root->right,ans);
    }
    
    vector <int> boundary(Node *root){
        if(root==NULL)  return {};
        vector<int>ans;
        ans.push_back(root->data);
        //traverse left subtree
        leftTraverse(root->left,ans);
        //traverse leaf nodes
        traverseLeaf(root->left,ans);
        traverseLeaf(root->right,ans);
        //traverse right subtree
        rightTraverse(root->right,ans);
        return ans;
    }
TC - O(N)
SC - O(HEIGHT OF TREE)

Vertical Traversal of Binary Tree
    vector<int> verticalOrder(Node *root){
        //to print in same order in case of overlap of vertical line
        map<int,map<int,vector<int>>>nodes;
        //to print in ascending order in case of overlap of vertical line -> map<int,map<int,multiset<int>>>nodes;        
        queue<pair<Node*,pair<int,int>>>q;
        q.push({root,{0,0}});
        while(!q.empty()){
            auto x=q.front();
            q.pop();
            Node* root=x.first;
            int vertical=x.second.first;
            int horizontal=x.second.second;
            nodes[vertical][horizontal].push_back(root->data);
            if(root->left)
                q.push({root->left,{vertical-1,horizontal+1}});
            if(root->right)
                q.push({root->right,{vertical+1,horizontal+1}});
        }
        vector<int>ans;
        for(auto p: nodes){
            for(auto q: p.second){
                ans.insert(ans.end(),q.second.begin(),q.second.end());
            }
        }
        return ans;
    }
TC - O(N) 
SC - O(N)

TOP VIEW
    vector<int> topView(Node *root){
        vector<int>vec;
        map<int,int>mp;
        queue<pair<Node*,int>>q;
        if(!root) return vec;
        q.push({root,0});
        while(!q.empty()){
            Node* t = q.front().first;
            int h = q.front().second;
            q.pop();
            if(!mp[h]) mp[h]=t->data;
            if(t->left) q.push({t->left,h-1});
            if(t->right) q.push({t->right,h+1});
        }
    for(auto x:mp) vec.push_back(x.second);
    return vec;
}
TC - O(N)
SC - O(N)

BOTTOM VIEW
    vector <int> bottomView(Node *root) {
        if(root==NULL)  return {};
        vector<int>vec;
        map<int,int>mp;
        queue<pair<Node*,int>>q;
        q.push({root,0});
        while(!q.empty()){
            Node* front=q.front().first;
            int vertHeight=q.front().second;
            q.pop();
            mp[vertHeight]=front->data;
            if(front->left)  q.push({front->left,vertHeight-1});
            if(front->right) q.push({front->right,vertHeight+1});
        }
        for(auto x: mp){
            vec.push_back(x.second);
        }
        return vec;
    }
TC - O(N)
SC - O(N)

RIGHT VIEW
M-1
    void solve(Node *root, vector<int>&ans,int level){
     if(root==NULL)
        return;
     if(level==ans.size()){
         ans.push_back(root->data);
     }
     solve(root->right,ans,level+1);
     solve(root->left,ans,level+1);
}
    vector<int> rightView(Node *root){
          vector<int>ans;
          solve(root,ans,0);
          return ans;
    }
TC - O(N)
SC - O(N)

M-2
vector<int> rightView(Node *root){
       vector<int>ans;
       queue<Node*>que;
       if(!root) return ans;
       que.push(root);
       while(!que.empty()){
         int sz=que.size();
          Node *t;
           while(sz--){
             t=que.front();
             que.pop();
             if(t->left) que.push(t->left);
             if(t->right) que.push(t->right);
       }
          ans.push_back(t->data);
   }
   return ans;
}
TC - O(N)
SC - O(N)

LEFT VIEW
M-1
vector<int> leftView(Node *root){
   vector<int>ans;
   queue<Node*>que;
   if(!root) return ans;
   que.push(root);
   while(!que.empty()){
       int sz=que.size();
       ans.push_back(que.front()->data);
       while(sz--){
           Node *t=que.front();
           que.pop();
           if(t->left) que.push(t->left);
           if(t->right) que.push(t->right);
       }
   }
   return ans;
   }
TC - O(N)
SC - O(N)

M-2
void solve(Node *root, vector<int>&ans,int level){
     if(root==NULL)
         return;
     if(level==ans.size())
         ans.push_back(root->data);
     solve(root->left,ans,level+1);
     solve(root->right,ans,level+1);
}

vector<int> leftView(Node *root){
   vector<int>ans;
   solve(root,ans,0);
   return ans;
}
TC - O(N)
SC - O(N)

Symmetric Tree
bool solve(Node* head1,Node* head2){
         if(head1==NULL && head2==NULL)
            return true;
         if(head1==NULL || head2==NULL)
           return false;
          if(head1!=NULL && head2!=NULL && head1->data!=head2->data) return false;
         return solve(head1->left,head2->right) && solve(head1->right,head2->left);
    }
    
    bool isSymmetric(Node* root){
      if(root==NULL)  return true;
	    Node* head1=root->left;
	    Node* head2=root->right;
	    return solve(head1,head2);
    }
TC - O(N)
SC - O(N)

Binary Tree Paths
void binaryTreePaths(vector<string>& result, TreeNode* root, string t) {
    if(!root->left && !root->right) {
        result.push_back(t);
        return;
    }
    if(root->left)  binaryTreePaths(result, root->left, t + "->" + to_string(root->left->val));
    if(root->right) binaryTreePaths(result, root->right, t + "->" + to_string(root->right->val));
}

vector<string> binaryTreePaths(TreeNode* root) {
    vector<string> result;
    if(!root) return result;
    binaryTreePaths(result, root, to_string(root->val));
    return result;
 }
TC - O(N)
SC - O(H)

Lowest Common Ancestor in a Binary Tree
  Node* lca(Node* root ,int n1 ,int n2 ){
       //base case
       if(root==NULL || root->data==n1 || root->data==n2){
           return root;
       }
       
       Node* left = lca(root->left,n1,n2);
       Node* right = lca(root->right,n1,n2);
       
       if(left==NULL){  //both null or left only null
           return right;
       }
       else if(right==NULL){  //right null left not null
           return left;
       }
       else{ //both not null
           return root;
       }
    }
TC - O(N)
SC - O(H)

