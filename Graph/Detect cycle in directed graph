https://www.geeksforgeeks.org/problems/detect-cycle-in-a-directed-graph/1
1 - DFS
bool checkCycleDFS(int node, unordered_map<int,bool>&visited, unordered_map<int,bool>&DFSvisited, vector<int> adj[]){
    visited[node]=true;
    DFSvisited[node]=true;
    for(auto neighbour: adj[node]){
        if(!visited[neighbour]){
            bool cycleDetected=checkCycleDFS(neighbour,visited,DFSvisited,adj);
            if(cycleDetected) return true;
        }
        else{
            //visited wala
            if(visited[neighbour]==true && DFSvisited[neighbour]==true){
                return true;
            }
        }
    }
    DFSvisited[node]=false;
    return false;
}
bool isCyclic(int v, vector<int> adj[]) {
    unordered_map<int,bool>visited, DFSvisited;
    //call dfs for all component nodes are from 1 to n so loop runs from 0 to v-1 
    for(int i=0;i<v;i++){
        if(!visited[i]){
            bool cycleFound=checkCycleDFS(i,visited,DFSvisited,adj);
            if(cycleFound) return true;
        }
    }
    return false;
}

2 - Kahn's Algo (Toposort)
bool isCyclic(int v, vector<int> adj[]) {
  vector<int>indegree(v,0);
  for(int i=0;i<v;i++){
      for(auto j:adj[i]){
          indegree[j]++;
      }
  } 
  //0 indegree walo ko push kardo
  queue<int>q;
  for(int i=0;i<v;i++){
      if(indegree[i]==0)
         q.push(i);
  }
   //do bfs
    vector<int>ans;
    while(!q.empty()){
       int front=q.front();
       q.pop();
       ans.push_back(front);
        //neighbour indegree update
        for(auto neighbour:adj[front]){
            indegree[neighbour]--;
            if(indegree[neighbour]==0)
                 q.push(neighbour);
        }   
    }
    if(ans.size()!=v) return true;
    return false;
  }
TC - O(V+E) [2E for undirected & E for directed]
SC - O(2V)
