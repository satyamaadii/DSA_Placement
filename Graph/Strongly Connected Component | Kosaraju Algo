only valid for DIRECTED GRAPHS
find SCC & Print SCC
strongly connected components - every node pair in a component is reachable from each other, a->b & b->a possible 
single nodes are always strongly connected components 
if we reverse edges between two SCC then we can not go from one SCC to another , i.e. adjacent SCC
if don not about SCC reverse the entire graph, even if u revrse the edges of a scc, the internal scc will still gonna reach , which will help to 
not go to adjacent scc

Steps:
1) Sort all the edges acccording to finishing time 
2) Reverse a graph
3) Do DFS

void dfs(int node, vector<int> &vis, vector<int> adj[], stack<int> &st) {
        vis[node] = 1;
        for (auto it : adj[node]) {
            if (!vis[it]) {
                dfs(it, vis, adj, st);
            }
        }
        st.push(node);
    }

void dfs3(int node, vector<int> &vis, vector<int> adjT[]) {
        vis[node] = 1;
        for (auto it : adjT[node]) {
            if (!vis[it]) {
                dfs3(it, vis, adjT);
            }
        }
    }

int kosaraju(int V, vector<int> adj[]){
        vector<int> vis(V, 0);
        stack<int> st;
        for (int i = 0; i < V; i++) {
            if (!vis[i]) {
                dfs(i, vis, adj, st);
            }
        }
        vector<int> adjT[V];
        for (int i = 0; i < V; i++) {
            vis[i] = 0;
            for (auto it : adj[i]) {
                adjT[it].push_back(i);
            }
        }
        int scc = 0;
        while (!st.empty()) {
            int node = st.top();
            st.pop();
            if (!vis[node]) {
                scc++;
                dfs3(node, vis, adjT);
            }
        }
        return scc;
    }
Time Complexity: O(V+E) + O(V+E) + O(V+E) ~ O(V+E)
Space Complexity: O(V)+O(V)+O(V+E)


