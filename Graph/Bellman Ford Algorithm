single source shortest path algo, Find shortest path from source to all other nodes, helps to detect negative cycle (sum of path weight in a cycle is negative) 
applicable only in DIRECTED GRAPHS, convert undirected to directed to implement bellman ford, edges can be in any order
Relax all edges n-1 times sequentially, Relax: dist[u] + edges_wt < dist[v] => dist[v]=dist[u]+edges_wt;  do it for n-1 times for all the edges 
Since in a graph of n nodes, in worst case , we need n-1 edegs to reach from the first to the last node, thereby we iterate for n-1 iterations 0->1->2->3->4
on Nth iteration relaxation will be done , and if the dist array get reduced , negative cycle exists

vector<int> bellman_ford(int V, vector<vector<int>>& edges, int S) {
        vector<int>dist(V,1e8);
        dist[S]=0;
        for(int i=0;i<V-1;i++){
            for(auto it: edges){
                int u =it[0], v =it[1], wt =it[2];
                if(dist[u]!= 1e8 && dist[u]+wt<dist[v]){
                    dist[v]= dist[u]+wt;
                }
            }
        }
        for(auto it: edges){
                int u =it[0], v =it[1], wt =it[2];
                if(dist[u]!= 1e8 && dist[u]+wt<dist[v]){
                    return {-1};
                }
            }
        return dist;
    }
TC - O(EV)
SC - O(V)
