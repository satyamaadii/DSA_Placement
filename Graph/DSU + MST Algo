DISJOINT SET - UNION BY RANK & UNION BY SIZE

class DisjointSet{
   vector<int>rank,parent,size;
public:
    DisjointSet(int n){        //constructor
        rank.resize(n+1,0);
        parent.resize(n+1);
        size.resize(n+1,0);
        for(int i=0;i<=n;i++){
            parent[i]=i;
        }
    }

    int findUltimateParent(int node){
        if(node==parent[node]) return node;
        return parent[node] = findUltimateParent(parent[node]);
    }
    
    void UnionByRank(int u, int v){
        int ulp_u = findUltimateParent(u);
        int ulp_v = findUltimateParent(v);
        if(ulp_u==ulp_v)  return;
        
        if(rank[ulp_u]<rank[ulp_v])
            parent[ulp_u]=ulp_v;
            
        else if(rank[ulp_v]<rank[ulp_u])
            parent[ulp_v]=ulp_u;
            
        else{
            parent[ulp_v]=ulp_u;
            rank[ulp_u]++;
        }
    }
    
     void UnionBySize(int u, int v){
        int ulp_u = findUltimateParent(u);
        int ulp_v = findUltimateParent(v);
        if(ulp_u==ulp_v)  return;
        if(size[ulp_u]<size[ulp_v]){
            parent[ulp_u]=ulp_v;
            size[ulp_u]+=size[ulp_v];
        }
        else{
            parent[ulp_v]=ulp_u;
            size[ulp_v]+=size[ulp_u];
        }
        
    }
};

TC - O( 4 alpha) = O(1)
sc - O(V)



Spanning Tree - in an undirected weighted graph, n nodes & m edges, a tree which have n nodes and n-1 edges and all nodes are reachable from each other
MST - spanning tree with minimum edges sum 

1) Prim's Algo (Greedy algorithm)

int spanningTree(int v,vector<vector<int>>adj[]){
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        vector<int>vis(v,0);         
        pq.push({0,0});       //weight node
        int totalwt=0;
        // O(E)
        while(!pq.empty()){
        //O(LOGE)
           int wt=pq.top().first;
           int node=pq.top().second;
           pq.pop();
           if(vis[node]==1)  continue;
           vis[node]=1;
           totalwt+=wt;
           for(auto it: adj[node]){
               int adjnode=it[0];
               int ewt=it[1];
               if(!vis[adjnode])
                  pq.push({ewt,adjnode});
            }
        }
        return totalwt;        
    }
TC - O(E LOGE)
SC - O(V)


KRUSKAL ALGORITHM (DISJOINT UNION SET)

class DisjointSet{
   vector<int>rank,parent,size;
public:
    DisjointSet(int n){        //constructor
        rank.resize(n+1,0);
        parent.resize(n+1);
        size.resize(n+1,0);
        for(int i=0;i<=n;i++){
            parent[i]=i;
        }
    }

    int findUltimateParent(int node){
        if(node==parent[node]) return node;
        return parent[node] = findUltimateParent(parent[node]);
    }
    
    void UnionByRank(int u, int v){
        int ulp_u = findUltimateParent(u);
        int ulp_v = findUltimateParent(v);
        if(ulp_u==ulp_v)  return;
        
        if(rank[ulp_u]<rank[ulp_v])
            parent[ulp_u]=ulp_v;
            
        else if(rank[ulp_v]<rank[ulp_u])
            parent[ulp_v]=ulp_u;
            
        else{
            parent[ulp_v]=ulp_u;
            rank[ulp_u]++;
        }
    }
    
     void UnionBySize(int u, int v){
        int ulp_u = findUltimateParent(u);
        int ulp_v = findUltimateParent(v);
        if(ulp_u==ulp_v)  return;
        if(size[ulp_u]<size[ulp_v]){
            parent[ulp_u]=ulp_v;
            size[ulp_u]+=size[ulp_v];
        }
        else{
            parent[ulp_v]=ulp_u;
            size[ulp_v]+=size[ulp_u];
        }
        
    }
};

	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[]){
        // craete edges from adjacency list
        // TC - O(N+E)
        vector<vector<int>>edges;
        for(int i=0;i<V;i++){
            for(auto it: adj[i]){
                int adjNode=it[0];
                int wt=it[1];
                int node=i;
                edges.push_back({wt,node,adjNode});
            }
        }

       // TC - O( E x 4 x alpha x 2) 
        DisjointSet ds(V);

        // TC - O(N LOG E)
        sort(edges.begin(),edges.end());
        int maxWt=0;
        for(auto it: edges){
            int wt=it[0];
            int u=it[1];
            int v=it[2];
            if(ds.findUltimateParent(u)!=ds.findUltimateParent(v)){
                maxWt+=wt;
                ds.UnionBySize(u,v);
            }
        }
        return maxWt;
    }

TC - O(N LOGE)
SC - O(N) N -> no of nodes or vertices


STRONGLY CONNECTED COMPONENTS ARE VALID ONLY FOR DIRECTED GRAPHS

kisi bhi node se start kro to sab ko reach kr skoge

void dfs(vector<vector<int>>& adj,vector<bool>&vis,stack<int>&st,int node){
	    vis[node]=true;
	    for(auto x: adj[node]){
	        if(!vis[x])
	            dfs(adj,vis,st,x);
	    }
	    
	    st.push(node);
	}
	
void dfs2(vector<vector<int>>&revadj,vector<bool>&vis,int node){
	    vis[node]=true;
	    for(auto i: revadj[node]){
	        if(!vis[i]){
	            dfs2(revadj,vis,i);
	        }
	    }
}
	
int kosaraju(int v,vector<vector<int>>& adj)
    {
        //step 1
        vector<bool>vis(v,false);
        stack<int>st;
        for(int i=0;i<v;i++){
            if(!vis[i]){
                dfs(adj,vis,st,i);
            }
        }
        
        //step 2
        //all false;
        for(int i=0;i<v;i++)  vis[i]=false;
        //reverse adjacency list
        vector<vector<int>>revadj(v);
        for(int i=0;i<v;i++){
            for(auto x: adj[i]){
                revadj[x].push_back(i);
            }
        }
        
        int cnt=0;
        while(st.size()){
            int y=st.top();
            st.pop();
            if(!vis[y]){
                cnt++;
                vis[y]=true;
                for(auto x: revadj[y]){
                    if(!vis[x])
                        dfs2(revadj,vis,x);
                }
            }
        }        
        return cnt;
    }
TC - O(V+E)
SC - O(V)

BRIDGES IN GRAPH 

    int timer = 1;
    void dfs(int node, int parent, vector<int> &vis, vector<int> adj[], int tin[], int low[], vector<vector<int>> &bridges) {
        vis[node] = 1;
        tin[node] = low[node] = timer;
        timer++;
        for (auto it : adj[node]) {
            if (it == parent) continue;
            if (vis[it] == 0) {
                dfs(it, node, vis, adj, tin, low, bridges);
                low[node] = min(low[it], low[node]);
                // node --- it
                if (low[it] > tin[node]) {
                    bridges.push_back({it, node});
                }
            }
            else {
                low[node] = min(low[node], low[it]);
            }
        }
    }
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        vector<int> adj[n];
        for (auto it : connections) {
            int u = it[0], v = it[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        vector<int> vis(n, 0);
        int tin[n];
        int low[n];
        vector<vector<int>> bridges;
        dfs(0, -1, vis, adj, tin, low, bridges);
        return bridges;
    }
TC - O(V+2E)
SC - O(V+2E) + O(3V)


ARTICULATION POINT

    int timer = 1;
    void dfs(int node, int parent, vector<int> &vis, int tin[], int low[], vector<int> &mark, vector<int>adj[]) {
        vis[node] = 1;
        tin[node] = low[node] = timer;
        timer++;
        int child = 0;
        for (auto it : adj[node]) {
            if (it == parent) continue;
            if (!vis[it]) {
                dfs(it, node, vis, tin, low, mark, adj);
                low[node] = min(low[node], low[it]);
                if (low[it] >= tin[node] && parent != -1) {
                    mark[node] = 1;
                }
                child++;
            }
            else {
                low[node] = min(low[node], tin[it]);
            }
        }
        if (child > 1 && parent == -1) {
            mark[node] = 1;
        }
    }
    vector<int> articulationPoints(int n, vector<int>adj[]) {
        vector<int> vis(n, 0);
        int tin[n];
        int low[n];
        vector<int> mark(n, 0);
        for (int i = 0; i < n; i++) {
            if (!vis[i]) {
                dfs(i, -1, vis, tin, low, mark, adj);
            }
        }
        vector<int> ans;
        for (int i = 0; i < n; i++) {
            if (mark[i] == 1) {
                ans.push_back(i);
            }
        }
        if (ans.size() == 0) return { -1};
        return ans;
    }
TC - O(V+2E)
SC - O(V+2E) + O(3V)
