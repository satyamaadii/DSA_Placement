BFS - Breadth First Search / Level Order Traversal

void bfs(unordered_map<int,set<int>>&adj,unordered_map<int,bool>&visited,vector<int>&ans,int &node){
    queue<int>q;
    q.push(node);
    visited[node]=1;
    while(!q.empty()){
        int frontnode=q.front();
        q.pop();
         //storefrontnode to ans
        ans.push_back(frontnode);
          //traverse all neighbours of frontnode
        for(auto neigh:adj[frontnode]){
            if(!visited[neigh]){
                q.push(neigh);
                visited[neigh]=1;
            }
        }     
    }  
}

vector<int> BFS(int vertex, vector<pair<int, int>> edges){
    unordered_map<int,set<int>>adj;
    for(int i=0;i<edges.size();i++){
         int u=edges[i].first, v=edges[i].second;
         adj[u].insert(v); adj[v].insert(u);
     }

    vector<int>ans;
    unordered_map<int,bool>visited;
    //traverse all components
    
    for(int i=0;i<vertex;i++){
        if(visited[i]==0){
            bfs(adj,visited,ans,i);
        }
    }
    return ans;
}

TC - O(N) +O(2E)
SC - O(3N) = O(N)  {3N for Queue, Visited & Adjacency list}

EXAMPLE for TC 

0 -> 1 ,2, 3
1 -> 0
2 -> 0,  4
3 -> 0
4 -> 2
So, total no. of edges = E = 4

For first while loop , 
node = 0,   edges = 3
Now, before going to the for loop part, u see a constant time operation O(1)  --> q.pop( )
This step will be executed every time we enter into while loop.

So, for first while loop how many times for loop will execute ??
It will be equal to the no. of edges , here it will be 3.

Therefore, total =  ( 1 + 3 )

Similarly for all other nodes, this is how it will look :
( 1 + 3 )  + ( 1 + 1 ) + ( 1 + 2 ) + ( 1 + 1 ) + ( 1 + 1 )
   =   13  
   =   O ( V  +  2 * E )  
   =   O ( 5  +  2  * 4 )
