TopoSorting (only for Directed Acyclic Graph) - linear ordering of vertices such that if there is an edge between u and v(u->v) 
u appears before v in that ordering

1 - Stack
void topoSort(int node,vector<bool>&visited,stack<int>&s,vector<int> adj[]){
   visited[node]=true;
   for(auto neighbour:adj[node]){
        if(!visited[neighbour]){
            topoSort(neighbour,visited,s,adj);
        }
   }
  s.push(node);
}
vector<int> topoSort(int v, vector<int> adj[]){
	vector<bool>visited(v,0);
  stack<int>s;
  for(int i=0;i<v;i++){
        if(!visited[i]) topoSort(i,visited,s,adj);
  }
  vector<int>ans;
  while(!s.empty()){
      ans.push_back(s.top());
      s.pop();
  }
    return ans;
}

2 - Kahn's Algo (Indegree) 
vector<int> topoSort(int v, vector<int> adj[]) {
    //find all indegrees
    vector<int>indegree(v,0);
    for(int i=0;i<v;i++){
        for(auto j:adj[i]){
            indegree[j]++;
        }
    }
    //0 indegree walo ko push kardo
    queue<int>q;
    for(int i=0;i<v;i++){
        if(indegree[i]==0) q.push(i);
    }
    //do bfs
    vector<int>ans;
    while(!q.empty()){
       int front=q.front();
       q.pop();
       ans.push_back(front);
       for(auto neighbour:adj[front]){
            indegree[neighbour]--;
            if(indegree[neighbour]==0)
               q.push(neighbour);
        }   
    }
    return ans;
  }
TC - O(V+E)
SC - O(E)
