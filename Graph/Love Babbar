Graph - type of data structure combination of nodes & edges.
2 type -> undirected & directed 
node - entity to store data
edge - connecting nodes
indegree - edges towards node 
outdegree - edges away from node
weighted graph - given weights on edges of graphs else by default take 1
path - sequence of nodes where all nodes comes exactly once
cyclic directed graph - formation of cycle, reaching same node again in directed graph
acylic graph - no cycle (for both directed & undirected)
graph - adjacency matrix or adjacency list
total degrees=2*edges

BFS Traversal 

void preparedAdjList(unordered_map<int,set<int>>&adj,vector<vector<int>> &edges){
     for(int i=0;i<edges.size();i++){
         int u=edges[i][0];
         int v=edges[i][1];
         adj[u].insert(v);
         adj[v].insert(u);
     }
}
void bfs(unordered_map<int,set<int>>&adj,unordered_map<int,bool>&visited,vector<int>&ans,int &node){
    queue<int>q;
    q.push(node);
    visited[node]=1;
    while(!q.empty()){
        int frontnode=q.front();
        q.pop();
        ans.push_back(frontnode);
        for(auto &neigh:adj[frontnode]){
            if(!visited[neigh]){
                q.push(neigh);
                visited[neigh]=1;
            }
        }     
    }  
}
vector<int> bfsTraversal(int vertex, vector<vector<int>> &edges){
    unordered_map<int,set<int>>adj;
    vector<int>ans;
    unordered_map<int,bool>visited;
    preparedAdjList(adj,edges);
    for(int i=0;i<vertex;i++){
        if(visited[i]==0){
            bfs(adj,visited,ans,i);
        }
    }
    return ans;
}

TC - O(V+E)
SC - O(V)  V= vertex , E = edges  // O(V+E) including adjacency list

DFS TRAVERSAL

void dfs(int node, vector<int>&visited, unordered_map<int,set<int>>&adj, vector<int>&temp){
    temp.push_back(node);
    visited[node]=1;
    //har connected node k liye recurrsive call karlo
    for(auto &neigh:adj[node]){
        if(!visited[neigh]){
           dfs(neigh,visited,adj,temp);
       }
   }
}

vector<vector<int>> depthFirstSearch(int vertices, int EDGE, vector<vector<int>> &edges){
    unordered_map<int,set<int>>adj;
    for(int i=0;i<edges.size();i++){
        int u=edges[i][0];
        int v=edges[i][1];
        adj[u].insert(v);
        adj[v].insert(u);
    }
    vector<int>visited(vertices,0);
    vector<vector<int>>ans;
    for(int i=0;i<vertices;i++){
        if(!visited[i]){
            vector<int>temp;
            dfs(i,visited,adj,temp);
            ans.push_back(temp);
        }
    }
    return ans;
}

TC - O(V+E)
SC - O(V+E)    since an extra visited array of size V is required, And stack size for iterative call to DFS function.

CYCLE DETECTION IN UNDIRECTED GRAPH

1)BFS METHOD 

bool isCyclicBFS(int src,unordered_map<int,bool>&visited,unordered_map<int,set<int>>&adj){
    unordered_map<int,int>parent;
    parent[src]=-1;
    visited[src]=1;
    queue<int>q;
    q.push(src);
    while(!q.empty()){
        int node=q.front();
        q.pop();
        for(auto neighbour:adj[node]){
            if(visited[neighbour]==true && neighbour!=parent[node]){
                return true;
            }
            else if(!visited[neighbour]){
                q.push(neighbour);
                visited[neighbour]=1;
                parent[neighbour]=node;
            }
        }
    }
  return false;
}
string cycleDetection (vector<vector<int>>& edges, int n, int m){
      //create adjacency list
      unordered_map<int,set<int>>adj;
      for(int i=0;i<m;i++){
          int u=edges[i][0];
          int v=edges[i][1];
          adj[u].insert(v);
          adj[v].insert(u);
      }
     //to handle disconnected components
     unordered_map<int,bool>visited;
     for(int i=0;i<n;i++){
         if(!visited[i]){
             bool ans=isCyclicBFS(i,visited,adj);
             if(ans==1) return "Yes";
         }
     }
    return "No";
}

2) DFS METHOD

bool isCyclicDFS(int node, int parent, unordered_map<int,bool>&visited, unordered_map<int,set<int>>&adj){
        visited[node]=true;
        for(auto neighbour:adj[node]){
            if(!visited[neighbour]){
                bool cycledetected = isCyclicDFS(neighbour,node,visited,adj);
                if(cycledetected) return true;
            } 
            else if(neighbour!=parent){
                return true;
            }
        }
    return false;
}

string cycleDetection (vector<vector<int>>& edges, int n, int m){
      unordered_map<int,set<int>>adj;
      for(int i=0;i<m;i++){
          int u=edges[i][0];
          int v=edges[i][1];
          adj[u].insert(v);
          adj[v].insert(u);
      }
     unordered_map<int,bool>visited;
     for(int i=0;i<n;i++){
         if(!visited[i]){
             bool ans=isCyclicDFS(i,-1,visited,adj);
             if(ans==1) return "Yes";
         }
     }
    return "No";
}

CYCLE DETECTION IN UNDIRECTED GRAPH

1) DFS METHOD

bool checkCycleDFS(int node, unordered_map<int,bool>&visited, unordered_map<int,bool>&DFSvisited,unordered_map<int,list<int>>&adj){
    visited[node]=true;
    DFSvisited[node]=true;
    for(auto neighbour: adj[node]){
        if(!visited[neighbour]){
            bool cycleDetected=checkCycleDFS(neighbour,visited,DFSvisited,adj);
            if(cycleDetected) return true;
        }
        else{
            if(DFSvisited[neighbour]==true && visited[neighbour]==true){
                return true;
            }
        }
    }
    DFSvisited[node]=false;
    return false;
}

int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
    unordered_map<int,list<int>>adj;
    for(int i=0;i<edges.size();i++){
        int u=edges[i].first;
        int v=edges[i].second;
        adj[u].push_back(v);
    }
    unordered_map<int,bool>visited, DFSvisited;
    for(int i=1;i<=n;i++){
        if(!visited[i]){
            bool cycleFound=checkCycleDFS(i,visited,DFSvisited,adj);
            if(cycleFound)
                  return true;
        }
    }
    return false;
}
TC - O(V+E)
SC - O(V+E)

TOPOLOGICAL SORT

A Directed Acyclic Graph (DAG) is a directed graph that contains no cycles.
Topological Sorting of DAG is a linear ordering of vertices st for every directed edge from vertex ‘u’ to vertex ‘v’, vertex ‘u’ comes before ‘v’ in the ordering.
Topological Sorting for a graph is not possible if the graph is not a DAG.

1) DFS METHOD

void topoSort(int node, vector<bool>&visited, stack<int>&s, unordered_map<int,list<int>>&adj){
   visited[node]=true;
   for(auto neighbour:adj[node]){
          if(!visited[neighbour]){
              topoSort(neighbour,visited,s,adj);
          }
   }
    s.push(node);
}

vector<int> topologicalSort(vector<vector<int>> &edges, int v, int e)  {
    unordered_map<int,list<int>>adj;
    for(int i=0;i<edges.size();i++){
      int u=edges[i][0];
      int v=edges[i][1];
      adj[u].push_back(v);
}
    vector<bool>visited(v);
    stack<int>s;
    for(int i=0;i<v;i++){
        if(!visited[i]){
            topoSort(i,visited,s,adj);
        }
    }
    vector<int>ans;
    while(!s.empty()){
        ans.push_back(s.top());
        s.pop();
    }
    return ans;
}
TC - O(V+E)
SC - O(V+E)

2) KAHN'S ALGORITHM (USES BFS LOGIC)

vector<int> topologicalSort(vector<vector<int>> &edges, int v, int e)  {
    unordered_map<int,list<int>>adj;
    for(int i=0;i<edges.size();i++){
      int u=edges[i][0];
      int v=edges[i][1];
      adj[u].push_back(v);
    }
    //find all indegrees
    vector<int>indegree(v);
    for(auto i:adj){
        for(auto j:i.second){
            indegree[j]++;
        }
    }
    //0 indegree walo ko push kardo
    queue<int>q;
    for(int i=0;i<v;i++){
        if(indegree[i]==0)
              q.push(i);
    }
    //do bfs
    vector<int>ans;
    while(!q.empty()){
       int node=q.front();
       q.pop();
       //ans store
       ans.push_back(node);
        //neighbour indegree update
        for(auto &neighbour : adj[node]){
            indegree[neighbour]--;
            if(indegree[neighbour]==0)
                 q.push(neighbour);
        }   
    }
    return ans;
}
TC - O(V+E)
SC - O(V)


CYCLE DETECTION IN DIRECTED GRAPH USING KAHN'S ALGO

#include<bits/stdc++.h>
int detectCycleInDirectedGraph(int n, vector<pair<int,int>>&edges){
    unordered_map<int,vector<int>>adj;
    for(int i=0;i<edges.size();i++){
         int u=edges[i].first;
         int v=edges[i].second;
         adj[u].push_back(v);
    }
    //find all indegrees
    vector<int>indegree(n);
    for(auto i:adj){
        for(auto j:i.second){
            indegree[j]++;
        }
    }
    
    //0 indegree walo ko push kardo
    queue<int>q;
    for(int i=0;i<n;i++){
        if(indegree[i]==0) q.push(i);
    }
    int cnt=0;;
    while(!q.empty()){
       int node=q.front();
       q.pop();
       cnt++;
        for(auto neighbour : adj[node]){
            indegree[neighbour]--;
            if(indegree[neighbour]==0)  q.push(neighbour);
        }   
    }
    return cnt!=n;
}
TC - O(V+E)
SC - O(V)


SHORTEST PATH IN UNDIRECTED GRAPHS

vector<int> shortestPath( vector<pair<int,int>> edges , int n , int m, int s , int t){
    unordered_map<int,list<int>>adj;
    for(int i=0;i<edges.size();i++){
        int u=edges[i].first;
        int v=edges[i].second;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    unordered_map<int,bool>visited;
    unordered_map<int,int>parent;
    queue<int>q;
    parent[s]=-1;
    q.push(s);
    visited[s]=triue;
    while(!q.empty()){
        int front=q.front();
        q.pop();
        for(auto i : adj[front]){
            if(!visited[i]){
                visited[i]=true;
                parent[i]=front;
                q.push(i);
            }
        }
    }
    vector<int>ans;
    int currnode=t;
    ans.push_back(t);
    while(currnode!=s){
        currnode=parent[currnode];
        ans.push_back(currnode);
    }
    reverse(ans.begin(),ans.end());
    return ans;
}
TC - O(V+E)
SC - O(V)


SHORTEST PATH IN DIRECTED ACYCLIC GRAPHS FROM GIVEN SOURCE (here 0)

void toposort(int node, vector<bool>&visited, unordered_map<int,vector<pair<int,int>>>&adj, stack<int>&st){
        visited[node]=true;
        for(auto it: adj[node]){
            if(!visited[it.first]){
                toposort(it.first,visited,adj,st);
            }
        }
        st.push(node);
    }
    
vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        unordered_map<int,vector<pair<int,int>>>adj;
        vector<int>indegree(N,0);
        for(int i=0;i<M;i++){
            int u=edges[i][0];
            int v=edges[i][1];
            int wt=edges[i][2];
            adj[u].push_back({v,wt});
        }
        vector<bool>visited(N,false);
        stack<int>st;
        for(int i=0;i<N;i++){
            if(!visited[i]){
                toposort(i,visited,adj,st);
            }
        }
        vector<int>dist(N,1e9);
        dist[0]=0;
        while(!st.empty()){
            int front=st.top();
            st.pop();   
            for(auto it: adj[front]){
                int v=it.first;
                int wt=it.second;
                if(dist[front]!=1e9 && dist[front]+wt<dist[v]){
                    dist[v]=dist[front]+wt;
                }
            }
        }
        for(int i=0;i<N;i++){
            if(dist[i]==1e9) dist[i]=-1;
        } 
        return dist;
    }
TC - O(V+E)
SC - O(V+E)

DIJKSTRA ALGORITHM

USING PRIORITY QUEUE

vector<int> dijkstra(vector<vector<int>> &vec, int V, int edges, int S) {
      unordered_map<int,vector<vector<int>>>adj;
      for(int i=0;i<edges;i++){
           int u=vec[i][0];
           int v=vec[i][1];
           int wt=vec[i][2];
           adj[u].push_back({v,wt});
           adj[v].push_back({u,wt});
      }
       vector<int>dist(V,INT_MAX);
        dist[S]=0;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        pq.push({0,S});    //dist node
        while(!pq.empty()){
            int dis=pq.top().first;
            int node=pq.top().second;
            pq.pop();
            for(auto it: adj[node]){
                int edgeWeight=it[1];
                int neighNode=it[0];
                if(dist[node]+edgeWeight<dist[neighNode]){
                    dist[neighNode]=dist[node]+edgeWeight;
                    pq.push({dist[neighNode],neighNode});
                }
            }
        }
        return dist;
}
TC - O(E LOG V)
SC - O(V+E)


PRIM'S ALGORITHM

SPANNING TREE = WHEN CONVERT GRAPH TO TREE ST IT CONTAINS N NODES & N-1 EDGS , & EVERY NODE IS REACHABLE FROM EVERY OTHER NODES 
MINIMUM SPANNING TREE = SUM OF EDGES WEIGHTS IS MINIMUM 

int spanningTree(int v, vector<vector<int>> adj[]){
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        vector<int>vis(v,0);         
        pq.push({0,0});       //weight node
        int totalwt=0;
        // O(E)
        while(!pq.empty()){
        //O(LOGE)
           int wt=pq.top().first;
           int node=pq.top().second;
           pq.pop();
           if(vis[node]) continue;
           vis[node]=1;
           totalwt+=wt;
           for(auto it: adj[node]){
               int adjnode=it[0];
               int ewt=it[1];
               if(!vis[adjnode]){
                  pq.push({ewt,adjnode});
               }
            }
        }
        return totalwt;    
    }
TC - O(E LOG V)
SC - O(V)

KRUSKAL ALGORITHM

class DisjointSet{
   vector<int>rank,parent,size;
public:
 
    DisjointSet(int n){        //constructor
        rank.resize(n+1,0);
        parent.resize(n+1);
        size.resize(n+1,0);
        for(int i=0;i<=n;i++){
            parent[i]=i;
        }
    }

    int findUltimateParent(int node){
        if(node==parent[node]) return node;
        return parent[node] = findUltimateParent(parent[node]);
    }
    
    void UnionByRank(int u, int v){
        int ulp_u = findUltimateParent(u);
        int ulp_v = findUltimateParent(v);
        if(ulp_u==ulp_v)  return;
        
        if(rank[ulp_u]<rank[ulp_v])
            parent[ulp_u]=ulp_v;
            
        else if(rank[ulp_v]<rank[ulp_u])
            parent[ulp_v]=ulp_u;
            
        else{
            parent[ulp_v]=ulp_u;
            rank[ulp_u]++;
        }
    }
    
     void UnionBySize(int u, int v){
        int ulp_u = findUltimateParent(u);
        int ulp_v = findUltimateParent(v);
        if(ulp_u==ulp_v)  return;
        if(size[ulp_u]<size[ulp_v]){
            parent[ulp_u]=ulp_v;
            size[ulp_u]+=size[ulp_v];
        }
        else{
            parent[ulp_v]=ulp_u;
            size[ulp_v]+=size[ulp_u];
        }
        
    }
};

	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[]){
        vector<vector<int>>edges;
        for(int i=0;i<V;i++){
            for(auto it: adj[i]){
                int adjNode=it[0];
                int wt=it[1];
                int node=i;
                edges.push_back({wt,node,adjNode});
            }
        }
        
        DisjointSet ds(V);
        sort(edges.begin(),edges.end());
        int maxWt=0;
        for(auto it: edges){
            int wt=it[0];
            int u=it[1];
            int v=it[2];
            if(ds.findUltimateParent(u)!=ds.findUltimateParent(v)){
                maxWt+=wt;
                ds.UnionBySize(u,v);
            }
        }
        return maxWt;
    }

TC - O(E LOG E) + O( 4 Alpha) = O (E LOG E) + O(1) = O(E LOG E)
SC - O(V)

KOSARAJU ALGORITHM
 1) SORTING TOPOLOGICAL SORT TO GET THE ORDER OF DFS TRAVERSAL
 2) TRANSPOSE GRAPH - SINCE STACK GIVES ORDERING IN REVERSE ORDER
 3) DFS COUNT 

void dfs(int node, unordered_map<int,list<int>>&adj, unordered_map<int,bool>&vis, stack<int>&st){
     vis[node]=1;
	 for(auto child: adj[node]){
		 if(!vis[child]){
			 dfs(child,adj,vis,st);
		 }
	 }
	 st.push(node);
}

void revdfs(int node, unordered_map<int,list<int>>&revadj, unordered_map<int,bool>&vis){
     vis[node]=1;
	 for(auto child: revadj[node]){
		 if(!vis[child]){
			 revdfs(child,revadj,vis);
		 }
	 }
}

int stronglyConnectedComponents(int v, vector<vector<int>> &edges){
	unordered_map<int,list<int>>adj;
	for(int i=0;i<edges.size();i++){
		int u=edges[i][0];
		int v=edges[i][1];
		adj[u].push_back(v);
	}
	// creating toposort
	stack<int>st;
	unordered_map<int,bool>vis;
	for(int i=0;i<v;i++){
		if(!vis[i]){
			dfs(i,adj,vis,st);
		}
	}
	// reverse the edges
	unordered_map<int,list<int>>revadj;
	for(int i=0;i<v;i++){
		vis[i]=0;
		for(auto child : adj[i]){
			revadj[child].push_back(i);
		}
	}
	// again dfs
	int Scc_Cnt=0;
	while(!st.empty()){
		int node=st.top();
		st.pop();
		if(!vis[node]){
	       Scc_Cnt++;
		   revdfs(node,revadj,vis);
		}
	}
	return Scc_Cnt;
}
TC - O(V+E)
SC - O(V)

BELLMAN FORD ALGORITHM

APPLIED ON DIRECTED GRAPHS WITH NEGATIVE WEIGHTS
CONVERT UNDIRECTED TO DIRECTED TO APPLY BF
APPLY N-1 TIMES FORMULA on all edges & 1 more time same formula apply kro agar koi distance updat ho jae mtlb negative cycle present h to min dist/ shortest path nhi find kr skte
if(dis[u] + wt< dist[v]) 

BRIDGES IN GRAPH

ARTICULATION POINT
