Graph - type of data structure combination of nodes & edges.
2 type -> undirected & directed 
node - entity to store data
edge - connecting nodes
indegree - edges towards node 
outdegree - edges away from node
weighted graph - given weights on edges of graphs else by default take 1
path - sequence of nodes where all nodes comes exactly once
cyclic directed graph - formation of cycle, reaching same node again in directed graph
acylic graph - no cycle (for both directed & undirected)
graph - adjacency matrix or adjacency list
total degrees=2*edges

BFS Traversal 

void preparedAdjList(unordered_map<int,set<int>>&adj,vector<vector<int>> &edges){
     for(int i=0;i<edges.size();i++){
         int u=edges[i][0];
         int v=edges[i][1];
         adj[u].insert(v);
         adj[v].insert(u);
     }
}
void bfs(unordered_map<int,set<int>>&adj,unordered_map<int,bool>&visited,vector<int>&ans,int &node){
    queue<int>q;
    q.push(node);
    visited[node]=1;
    while(!q.empty()){
        int frontnode=q.front();
        q.pop();
        ans.push_back(frontnode);
        for(auto &neigh:adj[frontnode]){
            if(!visited[neigh]){
                q.push(neigh);
                visited[neigh]=1;
            }
        }     
    }  
}
vector<int> bfsTraversal(int vertex, vector<vector<int>> &edges){
    unordered_map<int,set<int>>adj;
    vector<int>ans;
    unordered_map<int,bool>visited;
    preparedAdjList(adj,edges);
    for(int i=0;i<vertex;i++){
        if(visited[i]==0){
            bfs(adj,visited,ans,i);
        }
    }
    return ans;
}

TC - O(V+E)
SC - O(V)  V= vertex , E = edges

DFS TRAVERSAL

void dfs(int node, vector<int>&visited, unordered_map<int,set<int>>&adj, vector<int>&temp){
    temp.push_back(node);
    visited[node]=1;
    //har connected node k liye recurrsive call karlo
    for(auto &neigh:adj[node]){
        if(!visited[neigh]){
           dfs(neigh,visited,adj,temp);
       }
   }
}

vector<vector<int>> depthFirstSearch(int vertices, int EDGE, vector<vector<int>> &edges){
    unordered_map<int,set<int>>adj;
    for(int i=0;i<edges.size();i++){
        int u=edges[i][0];
        int v=edges[i][1];
        adj[u].insert(v);
        adj[v].insert(u);
    }
    vector<int>visited(vertices,0);
    vector<vector<int>>ans;
    for(int i=0;i<vertices;i++){
        if(!visited[i]){
            vector<int>temp;
            dfs(i,visited,adj,temp);
            ans.push_back(temp);
        }
    }
    return ans;
}

TC - O(V+E)
SC - O(V+E)    since an extra visited array of size V is required, And stack size for iterative call to DFS function.

CYCLE DETECTION IN UNDIRECTED GRAPH

1)BFS METHOD 

bool isCyclicBFS(int src,unordered_map<int,bool>&visited,unordered_map<int,set<int>>&adj){
    unordered_map<int,int>parent;
    parent[src]=-1;
    visited[src]=1;
    queue<int>q;
    q.push(src);
    while(!q.empty()){
        int node=q.front();
        q.pop();
        for(auto neighbour:adj[node]){
            if(visited[neighbour]==true && neighbour!=parent[node]){
                return true;
            }
            else if(!visited[neighbour]){
                q.push(neighbour);
                visited[neighbour]=1;
                parent[neighbour]=node;
            }
        }
    }
  return false;
}
string cycleDetection (vector<vector<int>>& edges, int n, int m){
      //create adjacency list
      unordered_map<int,set<int>>adj;
      for(int i=0;i<m;i++){
          int u=edges[i][0];
          int v=edges[i][1];
          adj[u].insert(v);
          adj[v].insert(u);
      }
     //to handle disconnected components
     unordered_map<int,bool>visited;
     for(int i=0;i<n;i++){
         if(!visited[i]){
             bool ans=isCyclicBFS(i,visited,adj);
             if(ans==1) return "Yes";
         }
     }
    return "No";
}

2) DFS METHOD

bool isCyclicDFS(int node, int parent, unordered_map<int,bool>&visited, unordered_map<int,set<int>>&adj){
        visited[node]=true;
        for(auto neighbour:adj[node]){
            if(!visited[neighbour]){
                bool cycledetected = isCyclicDFS(neighbour,node,visited,adj);
                if(cycledetected) return true;
            } 
            else if(neighbour!=parent){
                return true;
            }
        }
    return false;
}

string cycleDetection (vector<vector<int>>& edges, int n, int m){
      unordered_map<int,set<int>>adj;
      for(int i=0;i<m;i++){
          int u=edges[i][0];
          int v=edges[i][1];
          adj[u].insert(v);
          adj[v].insert(u);
      }
     unordered_map<int,bool>visited;
     for(int i=0;i<n;i++){
         if(!visited[i]){
             bool ans=isCyclicDFS(i,-1,visited,adj);
             if(ans==1) return "Yes";
         }
     }
    return "No";
}

CYCLE DETECTION IN UNDIRECTED GRAPH

1) DFS METHOD

bool checkCycleDFS(int node, unordered_map<int,bool>&visited, unordered_map<int,bool>&DFSvisited,unordered_map<int,list<int>>&adj){
    visited[node]=true;
    DFSvisited[node]=true;
    for(auto neighbour: adj[node]){
        if(!visited[neighbour]){
            bool cycleDetected=checkCycleDFS(neighbour,visited,DFSvisited,adj);
            if(cycleDetected) return true;
        }
        else{
            if(DFSvisited[neighbour]==true && visited[neighbour]==true){
                return true;
            }
        }
    }
    DFSvisited[node]=false;
    return false;
}

int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
    unordered_map<int,list<int>>adj;
    for(int i=0;i<edges.size();i++){
        int u=edges[i].first;
        int v=edges[i].second;
        adj[u].push_back(v);
    }
    unordered_map<int,bool>visited, DFSvisited;
    for(int i=1;i<=n;i++){
        if(!visited[i]){
            bool cycleFound=checkCycleDFS(i,visited,DFSvisited,adj);
            if(cycleFound)
                  return true;
        }
    }
    return false;
}
TC - O(V+E)
SC - O(V+E)

TOPOLOGICAL SORT

A Directed Acyclic Graph (DAG) is a directed graph that contains no cycles.
Topological Sorting of DAG is a linear ordering of vertices st for every directed edge from vertex ‘u’ to vertex ‘v’, vertex ‘u’ comes before ‘v’ in the ordering.
Topological Sorting for a graph is not possible if the graph is not a DAG.

1) DFS METHOD

void topoSort(int node, vector<bool>&visited, stack<int>&s, unordered_map<int,list<int>>&adj){
   visited[node]=true;
   for(auto neighbour:adj[node]){
          if(!visited[neighbour]){
              topoSort(neighbour,visited,s,adj);
          }
   }
    s.push(node);
}

vector<int> topologicalSort(vector<vector<int>> &edges, int v, int e)  {
    unordered_map<int,list<int>>adj;
    for(int i=0;i<edges.size();i++){
      int u=edges[i][0];
      int v=edges[i][1];
      adj[u].push_back(v);
}
    vector<bool>visited(v);
    stack<int>s;
    for(int i=0;i<v;i++){
        if(!visited[i]){
            topoSort(i,visited,s,adj);
        }
    }
    vector<int>ans;
    while(!s.empty()){
        ans.push_back(s.top());
        s.pop();
    }
    return ans;
}
TC - O(V+E)
SC - O(V+E)

2) KAHN'S ALGORITHM (USES BFS LOGIC)

vector<int> topologicalSort(vector<vector<int>> &edges, int v, int e)  {
    unordered_map<int,list<int>>adj;
    for(int i=0;i<edges.size();i++){
      int u=edges[i][0];
      int v=edges[i][1];
      adj[u].push_back(v);
    }
    //find all indegrees
    vector<int>indegree(v);
    for(auto i:adj){
        for(auto j:i.second){
            indegree[j]++;
        }
    }
    //0 indegree walo ko push kardo
    queue<int>q;
    for(int i=0;i<v;i++){
        if(indegree[i]==0)
              q.push(i);
    }
    //do bfs
    vector<int>ans;
    while(!q.empty()){
       int node=q.front();
       q.pop();
       //ans store
       ans.push_back(node);
        //neighbour indegree update
        for(auto &neighbour : adj[node]){
            indegree[neighbour]--;
            if(indegree[neighbour]==0)
                 q.push(neighbour);
        }   
    }
    return ans;
}
TC - O(V+E)
SC - O(V)


CYCLE DETECTION IN DIRECTED GRAPH USING KAHN'S ALGO

#include<bits/stdc++.h>
int detectCycleInDirectedGraph(int n, vector<pair<int,int>>&edges){
    unordered_map<int,vector<int>>adj;
    for(int i=0;i<edges.size();i++){
         int u=edges[i].first;
         int v=edges[i].second;
         adj[u].push_back(v);
    }
    //find all indegrees
    vector<int>indegree(n);
    for(auto i:adj){
        for(auto j:i.second){
            indegree[j]++;
        }
    }
    
    //0 indegree walo ko push kardo
    queue<int>q;
    for(int i=0;i<n;i++){
        if(indegree[i]==0) q.push(i);
    }
    int cnt=0;;
    while(!q.empty()){
       int node=q.front();
       q.pop();
       cnt++;
        for(auto neighbour : adj[node]){
            indegree[neighbour]--;
            if(indegree[neighbour]==0)  q.push(neighbour);
        }   
    }
    return cnt!=n;
}
TC - O(V+E)
SC - O(V)



