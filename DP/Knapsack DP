1)  0/1 Knapsack 
Memoization
int f(int indx, int target, vector<int> &wt, vector<int> &val, vector<vector<int>>&dp){
    if(indx<0) return 0;
	if(indx==0){
		if(target>=wt[0]) return val[0];
		else return 0;
	}
	if(dp[indx][target]!=-1) return dp[indx][target];
	int notTake=0+f(indx-1,target,wt,val,dp);
	int take=INT_MIN;
	if(target>=wt[indx]) take=val[indx]+f(indx-1,target-wt[indx],wt,val,dp);
	return dp[indx][target]=max(take,notTake);
}

int knapsack(vector<int> wt, vector<int> val, int n, int W) {
	vector<vector<int>>dp(n,vector<int>(W+1,-1));
	return f(n-1,W,wt,val,dp);
}
TC - O(N*K)
SC - O(N*K) + stack space

Tabulation
int knapsack(vector<int> wt, vector<int> val, int n, int W) {
	vector<vector<int>>dp(n+1,vector<int>(W+1,0));
	for(int i=1;i<=n;i++){
		for(int j=1;j<=W;j++){
			if(j>=wt[i-1]) dp[i][j]=max(val[i-1]+dp[i-1][j-wt[i-1]], dp[i-1][j]);
			else dp[i][j]=dp[i-1][j];
		}
	}
	return dp[n][W];
}
TC - O(N*K)
SC - O(N*K) 

Space Optimization
int knapsack(vector<int> wt, vector<int> val, int n, int W) {
    vector<int>prev(W+1,0);
	for(int i=1;i<=n;i++){
		vector<int>curr(W+1,0);
		for(int j=1;j<=W;j++){
			if(j>=wt[i-1]) curr[j]=max(val[i-1]+prev[j-wt[i-1]], prev[j]);
			else curr[j]=prev[j];
		}
		prev=curr;
	}
	return prev[W];
}
TC - O(N*K)
SC - O(K)

2) Min Coins to reach target

Tabulation
int minimumElements(vector<int> &num, int target){
   int n=num.size();
   int dp[n+1][target+1];
   for(int j=0;j<=target;j++){
       dp[0][j]=INT_MAX-1;
   }
   for(int i=1;i<=n;i++){
       dp[i][0]=0;
   }
   for(int j=1;j<=target;j++){
       dp[1][j]=(j%num[0]!=0?INT_MAX-1:j/num[0]);
   }
   for(int i=2;i<=n;i++){
       for(int j=1;j<=target;j++){
           if(num[i-1]<=j){
               dp[i][j]=min(dp[i-1][j], 1+dp[i][j-num[i-1]]);
           }
           else{
               dp[i][j]=dp[i-1][j];
           }
       }
   }
   if(dp[n][target]>=INT_MAX-1)  return -1;
   return dp[n][target];   
}
TC - O(N*K)
SC - O(N*K)

Space Optimization
int minimumElements(vector<int> &num, int target){
   int n=num.size();
   vector<int>prev(target+1,0);
   for(int j=1;j<=target;j++){
       prev[j]=(j%num[0]!=0?INT_MAX-1:j/num[0]);
   }
   for(int i=2;i<=n;i++){
       vector<int>curr(target+1,0);
       for(int j=1;j<=target;j++){
           if(num[i-1]<=j){
               curr[j]=min(prev[j], 1+curr[j-num[i-1]]);
           }
           else{
               curr[j]=prev[j];
           }
       }
       prev=curr;
   }
   if(prev[target]>=INT_MAX-1)  return -1;
   return prev[target];   
}
TC - O(N*K)
SC - O(K)

3) Ways To Make Coin Change
Tabulation:
long countWaysToMakeChange(int *num, int n, int target){
   ll dp[n+1][target+1];
   for(ll j=0;j<=target;j++){
       dp[0][j]=0;
   }
   for(ll i=0;i<=n;i++){
       dp[i][0]=1;
   }
   for(ll j=1;j<=target;j++){
       dp[1][j]=(j%num[0]!=0?0:1);
   }
   for(ll i=2;i<=n;i++){
       for(ll j=1;j<=target;j++){
           if(num[i-1]<=j){
               dp[i][j]=dp[i-1][j]+dp[i][j-num[i-1]];
           }
           else{
               dp[i][j]=dp[i-1][j];
           }
       }
   }
   return dp[n][target];  
}
TC - O(N*K)
SC - O(N*K)

4) Target Sum 
Tabulation
int targetSum(int n, int d, vector<int>& arr) {
    int totsum=0;
    for(int i=0;i<n;i++)  totsum+=arr[i];
    if((totsum-d)<0 || (totsum-d)%2==1) return 0;
    int k=(totsum-d)/2;
    //count total subsets which gives sum k
    int dp[n+1][k+1];  // dp of no of elements and required sum 
    dp[0][0]=1;
    for(int j=1;j<=k;j++)  dp[0][j]=0;
    for(int i=1;i<=n;i++){
      for(int j=0;j<=k;j++){  // done differently since arr had 0 elements too
          if(j>=arr[i-1])  dp[i][j]=dp[i-1][j-arr[i-1]]+dp[i-1][j];
          else dp[i][j]=dp[i-1][j];
      } 
    }
    return dp[n][k];
}
TC - O(N*K)
SC - O(N*K)

Space optimization
int targetSum(int n, int d, vector<int>& arr) {
    int totsum=0;
    for(int i=0;i<n;i++)  totsum+=arr[i];
    if((totsum-d)<0 || (totsum-d)%2==1) return 0;
    int k=(totsum-d)/2;
    //count total subsets which gives sum k
    vector<int>prev(k+1,0);
    prev[0]=1;
    for(int i=1;i<=n;i++){
         vector<int>curr(k+1,0);
      for(int j=0;j<=k;j++){
          curr[j]=prev[j];
          if(j>=arr[i-1])  curr[j]+=prev[j-arr[i-1]];
      } 
        prev=curr;
    }
    return prev[k];
}
TC - O(N*K)
SC - O(K)

5) Uubounded Knapsack
Memoization
int f(int indx, int W, vector<int> &profit, vector<int> &weight, vector<vector<int>>&dp){
    if(indx<0) return 0;
    if(indx==0){
        return (W/weight[0])*profit[0];
    }
    if(W==0) return 0;
    if(dp[indx][W]!=-1) return dp[indx][W];
    int notTake=0+f(indx-1,W,profit,weight,dp);
    int take=INT_MIN;
    if(W>=weight[indx]){
        take=profit[indx]+f(indx,W-weight[indx],profit,weight,dp);
    }
    return  dp[indx][W]=max(take,notTake);
}
int unboundedKnapsack(int n, int W, vector<int> &profit, vector<int> &weight){
    vector<vector<int>>dp(n,vector<int>(W+1,-1));
    return f(n-1,W,profit,weight,dp);
}
TC - O(N*K)
SC - O(N*K) + stack space

Tabulation
int unboundedKnapsack(int n, int W, vector<int> &profit, vector<int> &weight){
    vector<vector<int>>dp(n,vector<int>(W+1,0)); // dp[index][weight]
    for(int j=0;j<=W;j++) dp[0][j]=(j/weight[0])*profit[0];
    for(int i=1;i<n;i++){
        for(int j=1;j<=W;j++){
            if(j>=weight[i]){
                dp[i][j]=max(dp[i-1][j], profit[i]+dp[i][j-weight[i]]);
            }
            else{
                dp[i][j]=dp[i-1][j];
            }
        }
    }
    return dp[n-1][W];
}
TC - O(N*K)
SC - O(N*K) 

Space Optimizations
int unboundedKnapsack(int n, int W, vector<int> &profit, vector<int> &weight){
    vector<int>prev(W+1,0);
    for(int j=0;j<=W;j++) prev[j]=(j/weight[0])*profit[0];
    for(int i=1;i<n;i++){
        vector<int>curr(W+1,0);
        for(int j=1;j<=W;j++){
            if(j>=weight[i]){
                curr[j]=max(prev[j], profit[i]+curr[j-weight[i]]);
            }
            else{
                curr[j]=prev[j];
            }
        }
        prev=curr;
    }
    return prev[W];
}
TC - O(N*K)
SC - O(K) 

6) Rod Cutting Problem  
Memoization
int f(int indx, int len, vector<int> &price, vector<vector<int>>&dp){
  if(indx<0) return 0;
	if(indx==0){
		 return len*price[0];
	} 
	if(len==0) return 0;
	if(dp[indx][len]!=-1) return dp[indx][len];
	int notTake=f(indx-1,len,price,dp);
	int take=INT_MIN;
	if(len>=indx+1){
		take=price[indx]+f(indx,len-indx-1,price,dp);
	}
	return dp[indx][len]=max(take,notTake);
}
int cutRod(vector<int> &price, int len){
	int n=price.size();
	vector<vector<int>>dp(n+1,vector<int>(len+1,-1));
	return f(n-1,len,price,dp);
}
TC - O(N*K)
SC - O(N*K) + stack space

Tabulation
int cutRod(vector<int> &price, int len){
	int n=price.size();
	vector<vector<int>>dp(n,vector<int>(len+1,0));
	for(int j=0;j<=len;j++) dp[0][j]=j*price[0];
	for(int i=1;i<n;i++){
		for(int j=1;j<=len;j++){
			if(j>=i+1){
				dp[i][j]=max(price[i]+dp[i][j-i-1], dp[i-1][j]);
			}
			else{
				dp[i][j]=dp[i-1][j];
			}
		}
	}
	return dp[n-1][len];
}
TC - O(N*K)
SC - O(N*K) 

Space Optimization
int cutRod(vector<int> &price, int len){
	int n=price.size();
	vector<int>prev(len+1,0);
	for(int j=0;j<=len;j++) prev[j]=j*price[0];
	for(int i=1;i<n;i++){
		vector<int>curr(len+1,0);
		for(int j=1;j<=len;j++){
			if(j>=i+1){
				curr[j]=max(price[i]+curr[j-i-1], prev[j]);
			}
			else{
				curr[j]=prev[j];
			}
		}
		prev=curr;
	}
	return prev[len];
}
TC - O(N*K)
SC - O(K)

