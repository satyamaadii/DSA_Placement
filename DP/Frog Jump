Fibonacci No  -  0 1 1 2 3 5 8 13 21 .....    0 indexing fibonacci series 
Overlapping subproblems - memoization (store value of subproblems in some map/table) 
Memoization 
int f(int n, vector<int>& dp){
    if(n<=1) return n;
    
    if(dp[n]!= -1) return dp[n];
    return dp[n]= f(n-1,dp) + f(n-2,dp);
}
TC - O(N) SC - O(N)

Tabulation
vector<int> dp(n+1,-1);
dp[0]= 0; dp[1]= 1;  
for(int i=2; i<=n; i++)  dp[i] = dp[i-1]+dp[i-2];
cout<<dp[n];
TC - O(N) SC - O(N)

Space Optimization
int prev2 = 0, prev = 1;
for(int i=2; i<=n; i++){
  int current_i = prev2+prev;
  prev2 = prev;
  prev = current_i;
}
cout<<prev;
TC - O(N) SC - O(1)

Frog Jump 
https://www.codingninjas.com/studio/problems/frog-jump_3621012
Memoization
int func(int ind,vector<int>&heights,vector<int>&dp){
  if(ind==0) return 0;
  if(dp[ind]!=-1) return dp[ind];
  int left=func(ind-1,heights,dp)+abs(heights[ind]-heights[ind-1]);
  int right = INT_MAX;
  if(ind>1) right=func(ind-2,heights,dp)+abs(heights[ind]-heights[ind-2]);
  return dp[ind]=min(left,right);
}
int frogJump(int n, vector<int> &heights){
  vector<int>dp(n,-1);
  return func(n-1,heights,dp);
}

Tabulation
int frogJump(int n, vector<int> &heights){
    vector<int>dp(n+1,0);
    dp[1]=0;
    dp[2]=abs(heights[1]-heights[0]);
    for(int i=3;i<=n;i++){
        dp[i]=min(dp[i-2]+abs(heights[i-1]-heights[i-3]) ,dp[i-1]+abs(heights[i-1]-heights[i-2]));
    }
    return dp[n];
}

Space Optimization
int frogJump(int n, vector<int> &heights){
    vector<int>dp(n,0);
    int prev2=0,prev=0,curri;
    for(int i=1;i<n;i++){
        int left=prev+abs(heights[i]-heights[i-1]);
        int right=INT_MAX;
        if(i>1) right=prev2+abs(heights[i]-heights[i-2]);
        curri=min(left,right);
        prev2=prev;
        prev=curri;
    }
    return prev;
}

Frog Jump with K Distance
int helper(int n, int k, vector<int> &heights) {
	if(n == 0) return 0;
	int minSteps = INT_MAX;
	for(int j=1; j<=k; j++) {
		int l = INT_MAX;
		if(n-j >= 0)
			l = helper(n-j, k, heights) + abs(heights[n] - heights[n-j]);
		minSteps = min(minSteps, l);
	}
	return minSteps;
}
int frogKJump(int n, int k, vector<int> &heights) {
	return helper(n-1, k, heights);
}







