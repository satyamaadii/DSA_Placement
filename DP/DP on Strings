1)  Longest Common Subsequence
Memoization
int f(int indx1,int indx2,string &str1,string &str2,vector<vector<int>>&dp){
    if(indx1<0 || indx2<0) return 0;
    if(dp[indx1][indx2]!=-1) return dp[indx1][indx2];
    int notTake=max(f(indx1-1,indx2,str1,str2,dp),f(indx1,indx2-1,str1,str2,dp));
    int take=INT_MIN;
    if(str1[indx1]==str2[indx2]) take=1+f(indx1-1,indx2-1,str1,str2,dp);
    return dp[indx1][indx2]=max(take,notTake);
}
int lcs(string str1, string str2){
	int n1=str1.size(), n2=str2.size();
    vector<vector<int>>dp(n1,vector<int>(n2,-1));
    return f(n1-1,n2-1,str1,str2,dp);
}
TC - O(N*M)
SC - O(N*M) + STACK SPACE

Tabulation
int lcs(string str1, string str2){
	int n1=str1.size(), n2=str2.size();
    vector<vector<int>>dp(n1+1,vector<int>(n2+1,0));
    for(int i=1;i<=n1;i++){
        for(int j=1;j<=n2;j++){
            if(str1[i-1]==str2[j-1]){
                dp[i][j]=1+dp[i-1][j-1];
            }
            else{
                dp[i][j]=max(dp[i-1][j], dp[i][j-1]);
            }
        }
    }
    return dp[n1][n2];
}
TC - O(N*M)
SC - O(N*M)

Space Optimization
int lcs(string str1, string str2){
	int n1=str1.size(), n2=str2.size();
    vector<int>prev(n2+1,0);
    for(int i=1;i<=n1;i++){
        vector<int>curr(n2+1,0);
        for(int j=1;j<=n2;j++){
            if(str1[i-1]==str2[j-1]){
                curr[j]=1+prev[j-1];
            }
            else{
                curr[j]=max(prev[j], curr[j-1]);
            }
        }
        prev=curr;
    }
    return prev[n2];
}
TC - O(N*M)
SC - O(M)

2)  Print Longest Common Subsequence
string findLCS(int n, int m,string &s1, string &s2){
	vector<vector<int>>dp(n+1,vector<int>(m+1,0));
	for(int i=1;i<=n;i++){
		for(int j=1;j<=m;j++){
			if(s1[i-1]==s2[j-1]) dp[i][j]=1+dp[i-1][j-1];
			else dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
		}
	}
	string ans="";
	int i=n,j=m;
	while(i && j){
		if(s1[i-1]==s2[j-1]){
			ans=s1[i-1]+ans;
			i--; j--;
		}
		else if(dp[i-1][j]<dp[i][j-1]) j--;
		else i--;
	}
	return ans;
}
TC - O(N*M)
SC - O(N*M)
Space Optimization not possible since we need complete 2 D matrix to print LCS 

3) Longest Common Substring
Recursion
int f(int i, int j, string &str1, string &str2, int count) {
    if (i == 0 || j == 0)
        return count;
    if (str1[i - 1] == str2[j - 1]) {
        count = f(i - 1, j - 1, str1, str2, count + 1);
    }
    count = max(count,  max(f(i, j - 1, str1, str2, 0), f(i - 1, j, str1, str2, 0)));
    return count;
  }
int lcs(string &str1, string &str2){
    int n1=str1.size(), n2=str2.size(), cnt=0;
    return f(n1,n2,str1,str2,cnt);   
}

Tabulation
int lcs(string &str1, string &str2){
    int n1=str1.size(), n2=str2.size(), maxm=INT_MIN;
    vector<vector<int>>dp(n1+1,vector<int>(n2+1,0));
    for(int i=1;i<=n1;i++){
        for(int j=1;j<=n2;j++){
            if(str1[i-1]==str2[j-1]){
                dp[i][j]=1+dp[i-1][j-1];
            }
            else{
                dp[i][j]=0;
            }
            maxm=max(maxm,dp[i][j]);
        }
    }
    return maxm;
}
TC - O(N*M)
SC - O(N*M)

Space Optimization
int lcs(string &str1, string &str2){
    int n1=str1.size(), n2=str2.size(), maxm=INT_MIN;
    vector<int>prev(n2+1,0);
    for(int i=1;i<=n1;i++){
        vector<int>curr(n2+1,0);
        for(int j=1;j<=n2;j++){
            if(str1[i-1]==str2[j-1]){
                curr[j]=1+prev[j-1];
            }
            maxm=max(maxm,curr[j]);
        }
        prev=curr;
    }
    return maxm;
}
TC - O(N*M)
SC - O(M)

4) Longest Palindromic Subsequence
Memoization
int f(int indx1,int indx2,string &str1,string &str2,vector<vector<int>>&dp){
    if(indx1<0 || indx2<0) return 0;
    if(dp[indx1][indx2]!=-1) return dp[indx1][indx2];
    int notTake=max(f(indx1-1,indx2,str1,str2,dp),f(indx1,indx2-1,str1,str2,dp));
    int take=INT_MIN;
    if(str1[indx1]==str2[indx2]) take=1+f(indx1-1,indx2-1,str1,str2,dp);
    return dp[indx1][indx2]=max(take,notTake);
}
int longestPalindromeSubsequence(string str1){
	int n=str1.size();
    string str2=str1;
    reverse(str2.begin(),str2.end());
    vector<vector<int>>dp(n,vector<int>(n,-1));
    return f(n-1,n-1,str1,str2,dp);
}

Tabulation
int longestPalindromeSubsequence(string str1){
    string str2=str1;
    reverse(str2.begin(),str2.end());
    int n=str1.size();
    vector<vector<int>>dp(n+1,vector<int>(n+1,0));
    for(int i=1;i<=n;i++){
        for(int j=1;j<=n;j++){
            if(str1[i-1]==str2[j-1]){
                dp[i][j]=1+dp[i-1][j-1];
            }
            else{
                dp[i][j]=max(dp[i-1][j], dp[i][j-1]);
            }
        }
    }
    return dp[n][n];
}

Space Optimization
int longestPalindromeSubsequence(string str1){
    string str2=str1;
    reverse(str2.begin(),str2.end());
    int n=str1.size();
    vector<int>prev(n+1,0);
    for(int i=1;i<=n;i++){
        vector<int>curr(n+1,0);
        for(int j=1;j<=n;j++){
            if(str1[i-1]==str2[j-1]){
                curr[j]=1+prev[j-1];
            }
            else{
                curr[j]=max(prev[j], curr[j-1]);
            }
        }
        prev=curr;
    }
    return prev[n];
}

5)  Minimum insertions to make a string palindrome  n-len of LPS
int minimumInsertions(string &str1){
	  string str2=str1;
    reverse(str2.begin(),str2.end());
    int n=str1.size();
    vector<vector<int>>dp(n+1,vector<int>(n+1,0));
    for(int i=1;i<=n;i++){
        for(int j=1;j<=n;j++){
            if(str1[i-1]==str2[j-1]){
                dp[i][j]=1+dp[i-1][j-1];
            }
            else{
                dp[i][j]=max(dp[i-1][j], dp[i][j-1]);
            }
        }
    }
    return n-dp[n][n];
}

6) Minimum Insertions/Deletions to Convert String A to String B    n1 + n2 - 2 * len_of_LPS 
int canYouMake(string &str1, string &str2){
    int n1=str1.size(), n2=str2.size();
    vector<vector<int>>dp(n1+1,vector<int>(n2+1,0));
    for(int i=1;i<=n1;i++){
        for(int j=1;j<=n2;j++){
            if(str1[i-1]==str2[j-1]){
                dp[i][j]=1+dp[i-1][j-1];
            }
            else{
                dp[i][j]=max(dp[i-1][j], dp[i][j-1]);
            }
        }
    }
    return n1+n2-2*dp[n1][n2];
}

7) Shortest Common Supersequence
string shortestSupersequence(string s1, string s2){
    int n=s1.size(), m=s2.size();
	vector<vector<int>>dp(n+1,vector<int>(m+1,0));
	for(int i=1;i<=n;i++){
		for(int j=1;j<=m;j++){
			if(s1[i-1]==s2[j-1]) dp[i][j]=1+dp[i-1][j-1];
			else dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
		}
	}
	string ans="";
	int i=n,j=m;
	while(i && j){
		if(s1[i-1]==s2[j-1]){
			ans=s1[i-1]+ans;
			i--; j--;} 
		else if(dp[i-1][j]<dp[i][j-1]){
             ans=s2[j-1]+ans;
             j--;
        } else{
             ans=s1[i-1]+ans;
             i--;
		}
    }
    while(i>0){
        ans=s1[i-1]+ans;
        i--;
    }
    while(j>0){
        ans=s2[j-1]+ans;
        j--;
     }
 return ans;
}

8) Distinct Subsequences 
Memoization
int solve(string &str1,string &str2,int i,int j,vector<vector<int>>&dp){
    if(j<0)  return 1;
    if(i<0)  return 0;

    if(dp[i][j]!=-1)  return dp[i][j];
    //matched take or leave choice
    if (str1[i] == str2[j]) {
      return dp[i][j]=solve(str1, str2, i - 1, j - 1,dp)%mod + solve(str1, str2, i - 1, j,dp)%mod ; // include  exclude
    }
    // not matched
    else {
      return dp[i][j]=solve(str1, str2, i - 1, j,dp);
    }
}
int distinctSubsequences(string &str1, string &str2) {
	int n=str1.size(), m=str2.size();
    vector<vector<int>>dp(n,vector<int>(m,-1));
    return solve(str1,str2,n-1,m-1,dp)%mod;  
} 

Tabulation
int subsequenceCounting(string &str1, string &str2, int n, int m) {
    vector<vector<int>>dp(n+1,vector<int>(m+1,0));
    for(int i=0;i<=n;i++){
        dp[i][0]=1;
    }
    for(int j=1;j<=m;j++){
        dp[0][j]=0;
    }
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            // matched 
            // include  exclude
            if(str1[i-1]==str2[j-1]){
                dp[i][j]=dp[i-1][j-1]%mod+dp[i-1][j]%mod;
            }
            else{
                dp[i][j]=dp[i-1][j]%mod;
            }
        }
    }
    return dp[n][m]%mod;
}

Space Optimization
int subsequenceCounting(string &str1, string &str2, int n, int m) {
    vector<int>prev(m+1,0);
    prev[0]=1;
    for(int i=1;i<=n;i++){
        vector<int>curr(m+1,0);
        curr[0]=1;
        for(int j=1;j<=m;j++){
            // matched 
            // include  exclude
            if(str1[i-1]==str2[j-1]){
                curr[j]=prev[j-1]%mod+prev[j]%mod;
            }
            else{
                curr[j]=prev[j]%mod;
            }
        }
        prev=curr;
    }
    return prev[m]%mod;
} 

9) Edit Distance
for string from last to first approach https://leetcode.com/problems/edit-distance/description/
Memoization
int f(int indx1,int indx2,string &str1, string &str2, vector<vector<int>>&dp){
    if(indx1<0 && indx2<0) return 0; // both empty
    if(indx1<0) return indx2-0+1;   // only str1 empty
    if(indx2<0) return indx1-0+1;   //only str2 empty
    if(dp[indx1][indx2]!=-1) return dp[indx1][indx2];
    if(str1[indx1]==str2[indx2]) return dp[indx1][indx2]=f(indx1-1,indx2-1,str1,str2,dp);
    // indx2 is acting as refernce and we are checking/operation done for indx1
    int d=1+f(indx1-1,indx2,str1,str2,dp);
    int r=1+f(indx1-1,indx2-1,str1,str2,dp);
    int i=1+f(indx1,indx2-1,str1,str2,dp);
    return dp[indx1][indx2]=min({d,r,i});
}
int editDistance(string str1, string str2){
    int n=str1.size(),m=str2.size();
    vector<vector<int>>dp(n,vector<int>(m,-1));
    return f(n-1,m-1,str1,str2,dp);
}
TC - O(N*M)
SC - O(N*M) + stack space

Tabulation
int editDistance(string str1, string str2){
    int n=str1.size(),m=str2.size();
    vector<vector<int>>dp(n+1,vector<int>(m+1,0));
    for(int i=0;i<=n;i++) dp[i][0]=i;
    for(int j=0;j<=m;j++) dp[0][j]=j;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(str1[i-1]==str2[j-1]){
                dp[i][j]=dp[i-1][j-1];
            }
            else{
                dp[i][j]=1+min(dp[i-1][j-1],min(dp[i-1][j],dp[i][j-1]));
            }
        }
    }
    return dp[n][m];
}
TC - O(N*M)
SC - O(N*M) 

Space Optimization
int editDistance(string str1, string str2){
    int n=str1.size(),m=str2.size();
    vector<int>prev(m+1,0);
    for(int j=0;j<=m;j++) prev[j]=j;
    for(int i=1;i<=n;i++){
        vector<int>curr(m+1,0);
        for(int j=1;j<=m;j++){
            if(str1[i-1]==str2[j-1]){
                curr[j]=prev[j-1];
            }
            else{
                curr[j]=1+min(prev[j-1],min(prev[j],curr[j-1]));
            }
        }
        prev=curr;
    }
    return prev[m];
}
TC - O(N*M)
SC - O(M) 

10) Wildcard Pattern Matching
pattern contains ? or *
Memoization
bool solve(string &pattern, string &text,int i,int j,vector<vector<int>>&dp){
    //base case
     if(i<0 && j<0) return true;
     if(i<0 && j>=0) return false;
     if(i>=0 && j<0){
        for(int ii=0;ii<=i;ii++){
          if (pattern[ii] != '*') {
            return false;
          }
        }
        return true;
     }
     if(dp[i][j]!=-1)  return dp[i][j];
    //when both char match or ? is there which will match too 
    if(pattern[i]==text[j] || pattern[i]=='?')
       dp[i][j] = solve(pattern,text,i-1,j-1,dp);
    //not match
    else if (pattern[i] == '*') {
       int emptyPattern = solve(pattern,text,i-1,j,dp);
       int notEmptyPattern = solve(pattern,text,i,j-1,dp);
       dp[i][j] = emptyPattern || notEmptyPattern;
    }
    else  dp[i][j] = false;
    return dp[i][j];
}
bool wildcardMatching(string pattern, string text){
    int n=pattern.size(), m=text.size();
    vector<vector<int>>dp(n,vector<int>(m,-1));
    return solve(pattern,text,n-1,m-1,dp);
}

Tabulation
bool wildcardMatching(string pattern, string text){
    int n=pattern.size();
    int m=text.size();
    vector<vector<int>>dp(n+1,vector<int>(m+1,false));
    dp[0][0]=true;
    for(int j=1;j<=m;j++){
       dp[0][j]=false;
    }
    for(int i=1;i<=n;i++){
       bool flag=true;
       for(int ii=1;ii<=i;ii++){
          if(pattern[ii-1]!='*'){
             flag=false;
             break;
          }
       }
       dp[i][0]=flag;
    }
    for(int i=1;i<=n;i++){
      for(int j=1;j<=m;j++){
         //when both char match or ? is there which will match too 
         if(pattern[i-1]==text[j-1] || pattern[i-1]=='?')
            dp[i][j] = dp[i-1][j-1];
         //not match
         else if (pattern[i-1] == '*') {
               int emptyPattern = dp[i-1][j];
               int notEmptyPattern = dp[i][j-1];
               dp[i][j] = emptyPattern || notEmptyPattern;
         }
         else dp[i][j]=false;
       }
    }
    return dp[n][m];
}

Space Optimization
bool wildcardMatching(string pattern, string text){
    int n=pattern.size();
    int m=text.size();
    vector<int>prev(m+1,false),  curr(m+1,false); 
    prev[0]=true;
    for(int j=1;j<=m;j++){
       prev[j]=false;
    }
    for(int i=1;i<=n;i++){
       //check for first elemnt in column 0 of every row
       bool flag=true;
       for(int ii=1;ii<=i;ii++){
          if(pattern[ii-1]!='*'){
             flag=false;
             break;
          }
       }
       curr[0]=flag;
      for(int j=1;j<=m;j++){
         //when both char match or ? is there which will match too 
         if(pattern[i-1]==text[j-1] || pattern[i-1]=='?')
            curr[j] = prev[j-1];
         //not match
         else if (pattern[i-1] == '*') {
               int emptyPattern = prev[j];
               int notEmptyPattern = curr[j-1];
                  curr[j] = emptyPattern || notEmptyPattern;
         }
         else curr[j]=false;
       }
       prev=curr; 
    }
    return curr[m];
}
