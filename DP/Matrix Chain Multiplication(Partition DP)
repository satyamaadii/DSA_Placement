(AxB) X (BxC) => Matrix of AxC => operations AxBxC    for multiple matrices add operations

1) MCM CODE 

RECURSION + MEMOIZATION
int f(vector<int>& arr, int i, int j, vector<vector<int>>& dp){
    // base condition
    if(i == j)
        return 0;
    if(dp[i][j]!=-1)
        return dp[i][j];
    int mini = INT_MAX;
    // partioning loop
    for(int k = i; k<= j-1; k++){
        int ans = f(arr,i,k,dp) + f(arr, k+1,j,dp) + arr[i-1]*arr[k]*arr[j];
        mini = min(mini,ans);
    }
    return mini;
}
int matrixMultiplication(vector<int>& arr, int N){   
    vector<vector<int>> dp(N,vector<int>(N,-1));
    int i =1;
    int j = N-1;
    return f(arr,i,j,dp);
}
TC - O(N*N*N)
SC - O(N*N) + O(N)

TABULATION

// Function to find the minimum number of operations for matrix multiplication
int matrixMultiplication(vector<int>& arr, int N) {
    // Create a DP table to store the minimum number of operations
    vector<vector<int>> dp(N, vector<int>(N, -1));
    // Initialize the diagonal elements of the DP table to 0
    for (int i = 0; i < N; i++) {
        dp[i][i] = 0;
    }
    // Loop for the length of the chain
    for (int len = 2; len < N; len++) {
        for (int i = 1; i < N - len + 1; i++) {
            int j = i + len - 1;
            dp[i][j] = INT_MAX;
            // Try different partition points to find the minimum
            for (int k = i; k < j; k++) {
                int cost = dp[i][k] + dp[k + 1][j] + arr[i - 1] * arr[k] * arr[j];
                dp[i][j] = min(dp[i][j], cost);
            }
        }
    }
    // The result is stored in dp[1][N-1]
    return dp[1][N - 1];
}
TC - O(N*N*N)
SC - O(N*N) 

2) 
