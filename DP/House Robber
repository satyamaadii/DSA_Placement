Maximum Sum of Non-Adjacent Elements
Memoization
int solve(vector<int> &nums, int n, vector<int>& dp){
    if(n<0) return 0;
    if(n==0) return nums[0];
    if(dp[n]!=-1) return dp[n];
    int include=solve(nums,n-2,dp)+nums[n];
    int exclude=solve(nums,n-1,dp)+0;
    dp[n]=max(include,exclude);
    return dp[n];
}
int maximumNonAdjacentSum(vector<int> &nums){
    int n=nums.size();
    vector<int>dp(n,-1);
    return solve(nums,n-1,dp);
}
TC - O(N)  SC - O(N)+stack space

Tabulation
int maximumNonAdjacentSum(vector<int> &nums){
    int n=nums.size();
    vector<int>dp(n);
    //dp[i] - max proft till index i
    dp[0]=nums[0];
    dp[1]=max(nums[0],nums[1]);
    for(int i=2;i<n;i++){
        int include = dp[i-2]+nums[i];
        int exclude = dp[i-1]+0;
        dp[i] = max(include,exclude);
    }
    return dp[n-1];
}
TC - O(N)  SC - O(N)

Space Optimization
int maximumNonAdjacentSum(vector<int> &nums){
    int n=nums.size();
    int prev2=nums[0];
    int prev1=max(nums[0],nums[1]);
    for(int i=2;i<n;i++){
        int include = prev2 + nums[i];
        int exclude = prev1 + 0;
        int curr = max(include,exclude);
        prev2=prev1;  prev1=curr;
    }    
    return prev1;
}
TC - O(N)  SC - O(1)

House Robber 2

Tabulation
long long int solve(vector<int> nums){
    long long int n=nums.size();
    long long int dp[n+1];
    dp[0]=0;
    dp[1]=nums[0];
    for(long long int i=2;i<=n;i++){
        dp[i]=max(dp[i-1]+0, dp[i-2]+nums[i-1]);
    }
    return max(dp[n-1],dp[n]);
}

long long int houseRobber(vector<int>&vec){
     long long int n=vec.size();
     if(n==1)  return vec[0];
     vector<int>vec1,vec2;
     for(long long int i=0;i<n;i++){
         if(i!=0)    vec1.push_back(vec[i]); //ignore first
         if(i!=n-1)  vec2.push_back(vec[i]);  //ignore last
     }
     long long int ans = max(solve(vec1),solve(vec2));
     return ans;
}

Space Optimization
long long fun(vector<int> v,int i,int n) {
    long long prev1=0,prev2 =0,curr;
    for(int j=i;j<n;j++){
        curr = max(v[j]+prev2,prev1);
        prev2=prev1;
        prev1=curr;
    }
    return curr;
}
long long int houseRobber(vector<int>& v){
    int n=v.size();
    if(n==1) return v[0];
    return max(fun(v,0,n-1),fun(v,1,n));
}


Ninja's Training
Memoization
int func(int day, int last ,vector<vector<int>>&points, vector<vector<int>>&dp){
   if(day==0){
     int maxm=0;
     for(int task=0;task<3;task++){
          if(task!=last){
              maxm=max(maxm,points[0][task]);
           }
     }
       return maxm;
   } 
   if(dp[day][last]!=-1)  return dp[day][last];
   int maxm=0;
    for(int task=0;task<3;task++){
       if(task!=last){
           int point=points[day][task]+func(day-1,task,points,dp);
           maxm=max(maxm,point);
       }
    }
       return dp[day][last]=maxm;
}

int ninjaTraining(int n, vector<vector<int>> &points){
  vector<vector<int>>dp(n,vector<int>(4,-1));
  return func(n-1,3,points,dp);
}
TC - O(N*4*3)  SC = O(N*4)

Tabulation
int ninjaTraining(int n, vector<vector<int>> &points){
    vector<vector<int>>dp(n,vector<int>(4,0));
    dp[0][0]=max(points[0][1],points[0][2]);
    dp[0][1]=max(points[0][0],points[0][2]);
    dp[0][2]=max(points[0][0],points[0][1]);
    dp[0][3]=max(points[0][0],max(points[0][1],points[0][2]));
    for(int day=1;day<n;day++){
        for(int last=0;last<4;last++){
             for(int task=0;task<3;task++){
                 if(task!=last) {
                  int point = points[day][task]+dp[day-1][task];
                  dp[day][last]=max(dp[day][last],point);
                 }
            }
        }
    }
    return dp[n-1][3];
}
TC - O(N*4*3)  SC = O(N*4)

Space Optimization
int ninjaTraining(int n, vector<vector<int>> &points){
    vector<int>prev(4,0);
    prev[0]=max(points[0][1],points[0][2]);
    prev[1]=max(points[0][0],points[0][2]);
    prev[2]=max(points[0][0],points[0][1]);
    prev[3]=max(points[0][0],max(points[0][1],points[0][2]));
    for(int day=1;day<n;day++){
        vector<int>curr(4,0);
        for(int last=0;last<4;last++){
             for(int task=0;task<3;task++){
                 if(task!=last) {
                  int point = points[day][task]+prev[task];
                  curr[last]=max(curr[last],point);
                 }
            }
        }
        prev=curr;
    }
    return prev[3];
}
TC - O(N*4*K)  SC = O(4)

