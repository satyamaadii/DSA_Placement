1) Maximum Rectangle Area with all 1's
M-1
int largestRectangleArea(vector < int > & histo) {
    stack < int > st;
    int maxA = 0;
    int n = histo.size();
    for (int i = 0; i <= n; i++) {
        while (!st.empty() && (i == n || histo[st.top()] >= histo[i])) {
            int height = histo[st.top()];
            st.pop();
            int width;
            if (st.empty())
                width = i;
            else
                width = i - st.top() - 1;
            maxA = max(maxA, width * height);
        }
        st.push(i);
    }
    return maxA;
}
int maximalAreaOfSubMatrixOfAll1(vector<vector<int>> &mat, int n, int m) {
    int maxArea = 0;
    vector<int> height(m, 0);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (mat[i][j] == 1) height[j]++;
            else height[j] = 0;
        }
        int area = largestRectangleArea(height);
        maxArea = max(maxArea, area);
    }
    return maxArea;
}
TC - O(N*(M+M))
SC - O(M)


M-2 USING NEAREST SMALLER TO LEFT & NEAREST SMALLER TO RIGHT
int MaximumAreaHistogram(vector<int>&arr,int n){
        //Nearest Smaller to Left
        vector<long long>nsl;
        stack<long long>s;
        for(long long i=0;i<n;i++){
            if(s.size()==0)  nsl.push_back(-1);
            else if(s.size()>0 && arr[s.top()]<arr[i]) nsl.push_back(s.top());
            else {
                while(s.size()>0 && arr[s.top()]>=arr[i]){
                    s.pop();
                }
                if(s.size()==0) nsl.push_back(-1);
                else if(s.size()>0 && arr[s.top()]<arr[i]) nsl.push_back(s.top());
            }
            s.push(i);
        }
        
        while(s.size()>0){
            s.pop();
        }
         
         //Nearset Smaller to Right
         vector<long long>nsr;
         for(long long i=n-1;i>=0;i--){
             if(s.size()==0)  nsr.push_back(n);
             else if(s.size()>0 && arr[s.top()]<arr[i]) nsr.push_back(s.top());
             else {
                 while(s.size()>0 && arr[s.top()]>=arr[i]){
                     s.pop();
                 }
                 if(s.size()==0)  nsr.push_back(n);
                 else if(s.size()>0 && arr[s.top()]<arr[i]) nsr.push_back(s.top());
             }
             s.push(i);
         }
         reverse(nsr.begin(),nsr.end());
         
         long long maxArea=-1;
        // vector<int>width;
         for(long long i=0;i<n;i++){
            // width.push_back(nsr[i]-nsl[i]-1);
            // long long temp=width[i]*arr[i];
             long long temp=(nsr[i]-nsl[i]-1)*arr[i];
             if(maxArea<temp) maxArea=temp;
         }
         return maxArea;
    }
    int maximalRectangle(vector<vector<char>>& arr) {
        int n=arr.size();
        int m=arr[0].size();
        vector<int>vec;
        for(int j=0;j<m;j++) vec.push_back(arr[0][j]-'0');
        
        long long ans=MaximumAreaHistogram(vec,m);
        
        for(int i=1;i<n;i++){
            for(int j=0;j<m;j++){
                if(arr[i][j]=='0') vec[j]=0;
                else vec[j]=vec[j]+1;
            }
            if(MaximumAreaHistogram(vec,m)>ans) ans=MaximumAreaHistogram(vec,m);
       }
       return ans;
    }


2) Count Square Submatrices with All 1s

int countSquares(int n, int m, vector<vector<int>> &arr) {
    vector<vector<int>> dp(n, vector<int>(m, 0));

    for (int j = 0; j < m; j++) dp[0][j] = arr[0][j];
    for (int i = 0; i < n; i++) dp[i][0] = arr[i][0];

    for (int i = 1; i < n; i++) {
        for (int j = 1; j < m; j++) {
            if (arr[i][j] == 0) dp[i][j] = 0;
            else {
                dp[i][j] = 1 + min(dp[i - 1][j],
                                   min(dp[i - 1][j - 1], dp[i][j - 1]));
            }
        }
    }

    int sum = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            sum += dp[i][j];
        }
    }
    return sum;
}
TC - O(N*M)
SC - O(N*M)
