STRIVER
1) REVERSE A LINKED LIST
ITERATIVE APPROACH
Node* reverseList(Node *head){
        //empty linked list or single element linked list  case
        if(head==NULL || head->next==NULL)  return head;
        // 2 or more elements
        Node* prev = NULL;
        Node* curr = head;
        Node* forward = NULL;
        while(curr!=NULL){
            forward = curr->next;
            curr->next = prev;
            prev=curr;
            curr=forward;
        }
        Node* newHead = prev;
        return newHead;
    }
TC - O(N)
SC - O(1)
RECURSIVE APPROACH
Node* reverseList(Node *head){
        if(head==NULL || head->next==NULL) return head;
        Node* newHead=reverseList(head->next);
        Node* next=head->next;
        next->next=head;
        head->next=NULL;
        return newHead;
    }
TC - O(N)
SC - O(N)  // STACK SPACE

2) Remove Nth Node From End of Linked List
FINDING LENGTH OF LINKED LIST
    int getLen(ListNode* head){
        int len=0;
        while(head){
            len++;
            head=head->next;
        }
        return len;
    }
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        int len=getLen(head);
        if(n>len)  return head;
        if(n==len) return head->next;
        int start=len-n;
        ListNode* prev=NULL;
        ListNode* curr=head;
        while(start-- && curr!=NULL){
            prev=curr;
            curr=curr->next;
        }
        prev->next=curr->next;
        delete curr;
        return head;
    }
TC - O(2N)
SC - O(1)

USING SLOW & FAST POINTERS
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode * start = new ListNode();
        start -> next = head;
        ListNode* fast = start;
        ListNode* slow = start;     
        for(int i = 1; i <= n; ++i)
            fast = fast->next;
        while(fast->next != NULL){
            fast = fast->next;
            slow = slow->next;
        }
        slow->next = slow->next->next;
        return start->next;
        }
TC - O(N)
SC - O(1)

3) Middle of the Linked List
    int getlength(Node *head){
        int len=0;
        while(head!=NULL){
            len++;
            head=head->next;
        }
        return len;
    }
    int getMiddle(Node *head){
        //empty Linked List
        if(head==NULL) return -1;
        int len = getlength(head);
        Node* curr = head;
        int temp = len/2; // for 2nd element print add 1 to it 
        int cnt=0;
        while(cnt<temp){
            curr=curr->next;
            cnt++;
        }
        return curr->data;
    }
TC - O(N)+O(N/2)
SC - O(1)

USING HARE - TORTOISE METHOD (SLOW & FAST POINTERS)
  ListNode* middleNode(ListNode* head) {
        ListNode* slow = head, *fast = head;
        while (fast && fast->next){
            slow = slow->next;
            fast = fast->next->next;
         }
        return slow;
    }
TC - O(N/2)
SC - O(1)

4) Merge Two Sorted Lists
IN EXTRA SPACE
Node* sortedMerge(Node* head1, Node* head2)  {  
    if(head1==NULL) return head2;
    if(head2==NULL) return head1;
    Node* newHead=new Node(-1);
    Node* temp=newHead;
    while(head1!=NULL && head2!=NULL){
         if(head1->data <= head2->data){ temp->next=head1; temp=temp->next; head1=head1->next; }
         else { temp->next=head2; temp=temp->next; head2=head2->next; }
    }
    if(head1!=NULL){
        temp->next=head1;
    }
    if(head2!=NULL){
        temp->next=head2;
    }
    return newHead->next;
}
TC - O(N1+N2)
SC - O(N1+N2)

IN CONSTANT SPACE
Node* sortedMerge(Node* head1, Node* head2)  {  
    if(head1==NULL) return head2;
    if(head2==NULL) return head1;
    if(head1->data > head2->data) swap(head1,head2);
    Node* newHead=head1;
    while(head1!=NULL && head2!=NULL){
         Node* temp=NULL;
         while(head1!=NULL && head1->data<=head2->data){
              temp=head1;
              head1=head1->next;
         }
         temp->next=head2;
         swap(head1,head2);
    }
    return newHead;
}  
TC - O(N1+N2)
SC - O(1)

5) DELETE NODE IN A LINKED LIST
    void deleteNode(ListNode* node) {
         //delete the node given , head of linked list not given
         if(node->next==NULL){
              node=NULL;
              return;
         }
         //1) copy the value next to node
         node->val=node->next->val;
         //2) chane links 
         node->next=node->next->next;
    }
TC - O(1)
SC - O(1)

6) ADD 2 NUMBERS AS LINKED LIST
CASE1 IF 243 + 564 = 708
    ListNode* addTwoNumbers(ListNode* head1, ListNode* head2) {
        ListNode* dummy=new ListNode(-1);
        ListNode* temp=dummy;
        int carry=0;
        while(head1!=NULL || head2!=NULL || carry!=0){
            int sum=0;
            if(head1){
                sum+=head1->val;
                head1=head1->next;
            }
            if(head2){
                sum+=head2->val;
                head2=head2->next;
            }
            sum+=carry;
            carry=sum/10;
            ListNode* node=new ListNode(sum%10);
            temp->next=node;
            temp=temp->next;
        }
        return dummy->next;
    }

CASE 2  IF   243+564 = 807
Node* reverseLL(struct Node* head){
      Node* curr = head;
      Node* prev = NULL;
      Node* next = NULL;
      while(curr!=NULL){
          next = curr->next;
          curr->next = prev;
          prev = curr;
          curr = next; 
       }     
       return prev ;
    }
  
  Node* addTwoNumbers(Node* head1,Node* head2) {
        Node* dummy=new Node(-1);
        Node* temp=dummy;
        int carry=0;
        while(head1!=NULL || head2!=NULL || carry!=0){
            int sum=0;
            if(head1){
                sum+=head1->data;
                head1=head1->next;
            }
            if(head2){
                sum+=head2->data;
                head2=head2->next;
            }
            sum+=carry;
            carry=sum/10;
            Node* node=new Node(sum%10);
            temp->next=node;
            temp=temp->next;
        }
        return dummy->next;
    }
    
    Node* addTwoLists( Node* head1, Node* head2){
         if(head1==NULL)  return head2;
         if(head2==NULL)  return head1;
         
         head1=reverseLL(head1);
         head2=reverseLL(head2);
         
         Node* sum=addTwoNumbers(head1,head2);
         sum=reverseLL(sum);
         return sum;
    }
TC - O(N+M)
SC - O(MAX(N,M))

7) Intersection point of two Linked Lists
M-1 
ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
	if(headA==NULL || headB==NULL) return NULL;
	ListNode * a = headA;
	ListNode * b = headB;
	while(a!=b){
		a = a==NULL ? headB : a->next;
        b = b==NULL ? headA : b->next;
	}
	return a;
}
TC - O(N+M)
SC - O(1)

M-2 
int getLength(Node* head){
    int len = 0;
    while(head!=NULL){
        len++;
        head = head->next;
    }
    return len ;
}

int intersectPoint(Node* head1, Node* head2){
    int len1 = getLength(head1);
    int len2 = getLength(head2);
    if(len1>len2){
        int cnt = len1 - len2;
        while(cnt>0){
            head1 = head1->next;
            cnt--;
        }
    }
    
    else if(len1<len2){
        int cnt = len2 - len1;
        while(cnt>0){
            head2 = head2->next;
            cnt--;
        }
    }
    
    //now height of both linked list becomes equal
    
    while(head1 && head2 && head1!= head2){
        head1 = head1->next;
        head2 = head2->next;
    }
    return head1==NULL ? -1 : head1->data;
}
TC - O(N+M)
SC - O(1)

8) Detect a cycle in a linked list 
M-1 
    bool detectLoop(Node* head){
        if(head == NULL) return false;  //0 element is not taken as loop
        unordered_map<Node* , bool> visited;
        Node* temp = head;
        while(temp!=NULL){
            //already visited node => loop detected
            if(visited[temp]==true){
                return true;
            }
            visited[temp]=true;
            temp=temp->next;
        }
        return false;
    }
TC - O(N)
SC - O(N)
M-2 
bool hasCycle(ListNode *head) {
        if(head==NULL || head->next==NULL)   return false;
        ListNode* fast = head;
        ListNode* slow = head;
        while(fast!=NULL && slow!=NULL && fast->next!=NULL){
            fast = fast->next->next;
            slow = slow->next;
            if(fast==slow) return true;  
        }
        return false;
}
TC - O(N)
SC - O(1)

9) Palindrome Linked List
M-1 
  bool isPalindrome(ListNode* head) {
        string str;
        while(head){
            str.push_back(head->val);
            head=head->next;
        }
        int i=0,j=str.size()-1;
        while(i<=j){
            if(str[i++]!=str[j--])  return false;
        }
        return true;
    }
TC - O(N)
SC - O(N)

M-2 create a new linked list by copying values & reverse it, then keep 2 pointers & check if palindrome or not

M-3 
bool isPalindrome(ListNode* head) {
        ListNode *slow = head;
        ListNode *fast = head;
        ListNode *prev;
        ListNode *temp;
        // find middle element 
        while (fast && fast->next){
            slow = slow->next;
            fast = fast->next->next;
        }

        // create 2 seperate linked lists
        prev = slow;
        slow = slow->next;
        prev->next = NULL;

        // reverse 2nd half of linked list
        while (slow){
            temp = slow->next;
            slow->next = prev;
            prev = slow;
            slow = temp;
        }
        fast = head, slow = prev;

       // check for palindrome 
        while (slow){
            if (fast->val != slow->val) return false;
            fast = fast->next;
            slow = slow->next;
        }
        return true;
    }
TC - O(N/2)
SC - O(1)

10) REVERSE NODES IN K-GROUP
M-1 WITH RECURSION
    int getLen(ListNode* head){
        int len=0;
        while(head){
            len++;
            head=head->next;
        }
        return len;
    }
    
    ListNode* reverse(ListNode* head, int k,int len){
        if(head==NULL || head->next==NULL || k==1 || len<k)
          return head;
        
        //step 1 return first k nodes

        ListNode* next=NULL;
        ListNode* curr=head;
        ListNode* prev=NULL;
        int cnt=0;
        while(curr!=NULL && cnt<k){
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
            cnt++;
        }
        
        //step2 attach head of this k part to reversed linked list 
        
        if(next!=NULL)
           head->next=reverse(next,k,len-k);
        
        //step 4 return head of reversed linked list
        return prev;
    }

    ListNode* reverseKGroup(ListNode* head, int k) {
        int len=getLen(head);
        return reverse(head,k,len);
    }
TC -O(N)
SC - O(1) + O(N) STACK SPACE

M-2 WITH ITERRATION
    ListNode* reverseKGroup(ListNode* head, int k) {
         if(head==NULL || head->next==NULL || k==1 ) return head;
         ListNode* dummy = new ListNode(0);
         dummy->next=head;

         ListNode* curr=dummy;
         ListNode* next=dummy;
         ListNode* prev=dummy;
         int cnt=0;
         while(curr->next!=NULL){
            curr=curr->next;
            cnt++;
         }
         while(cnt>=k){
            curr=prev->next;
            next=curr->next;
            for(int i=1;i<k;i++){
                curr->next=next->next;
                next->next=prev->next;
                prev->next=next;
                next=curr->next;
            }
            prev=curr;
            cnt-=k;
         }
         return dummy->next;
    }
TC -O(N)
SC - O(1)

11) STARTING POINT OF THE CYCLE
Slow = L1+L2
Fast = L1+L2+NC
Since fast pointer travels twic the distance what slow pointer travels
2(L1+L2) = L1+L2+NC
L1+L2 = NC
L1=NC-L2
Hence , move entry pointer & slow pointer by one unit then you meet at starting point
   ListNode *detectCycle(ListNode *head) {
    if (head == NULL || head->next == NULL) return NULL;
    
    ListNode *slow  = head;
    ListNode *fast  = head;
    ListNode *entry = head;
    
    while (fast->next && fast->next->next) {
        slow = slow->next;
        fast = fast->next->next;
        if (slow == fast) {                      // there is a cycle
            while(slow != entry) {               // found the entry location
                slow  = slow->next;
                entry = entry->next;
            }
            return entry;
        }
    }
    return NULL;                                 // there has no cycle
}
TC - O(N)
SC - O(1)

12) 
