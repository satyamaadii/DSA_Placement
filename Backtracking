1) RAT IN A MAZE PROBLEM
bool isSafe(int x, int y, vector<vector<int>> &visited, int n, vector<vector<int>> arr ){
    if((x >=0 && x<=n-1) && (y>=0 && y<=n-1) && visited[x][y] == 0 && arr[x][y] == 1){
        return true;
    }
    else{
        return false;
    }
}

void solve(vector<vector<int>> arr, int n, vector<string> &ans, int x, int y, vector<vector<int>> &visited, string path ){
    // base case
    if(x == n-1 && y == n-1){
        ans.push_back(path);
        return;
    }
    // marking the visited index 1 to avoid reuse
    visited[x][y] = 1;
    // we have 4 choices ( L, R, D, U)
    // down D
    int newx = x+1;
    int newy = y;
    if(isSafe(newx, newy, visited, n, arr)){
        path.push_back('D');
        solve(arr, n, ans, newx, newy, visited, path);
        path.pop_back();
    }
    // left L
    newx = x;
    newy = y-1;
    if(isSafe(newx, newy, visited, n, arr)){
        path.push_back('L');
        solve(arr, n, ans, newx, newy, visited, path);
        path.pop_back();
    }
    // right R
    newx = x;
    newy = y+1;
    if(isSafe(newx, newy, visited, n, arr)){
        path.push_back('R');
        solve(arr, n, ans, newx, newy, visited, path);
        path.pop_back();
    }
    // up U
    newx = x-1;
    newy = y;
    if(isSafe(newx, newy, visited, n, arr)){
        path.push_back('U');
        solve(arr, n, ans, newx, newy, visited, path);
        path.pop_back();
    }
    // unmarking the visited index while backtracking
    visited[x][y] = 0;
}

vector<string>searchMaze(vector<vector<int>>&arr, int n){
    vector<string> ans;
    // condition if the very first srcx place is 0
    if(arr[0][0] == 0){
        return ans;
    }
    // source of the rat (0,0)
    int srcx = 0, srcy = 0;
    // creating a visited array to mark the visited places with 1
    vector<vector<int>> visited(n,vector<int>(n,0));
    // creating string to save the path
    string path;
    solve(arr, n, ans, srcx, srcy, visited, path);
    // sorting the ans
    sort(ans.begin(), ans.end());
    return ans;
}
TC -> pow(4, NxN)
SC -> O(NxN)

2) N QUEENS PROBLEM 
void addSolution(vector<vector<int>> & board, vector<vector<int>> & answer, int n){
    vector<int> temp;
    for(int i=0;i<n;i=i+1){
        for(int j=0;j<n;++j){
            temp.push_back(board[i][j]);
        }
    }
    answer.push_back(temp);
}

bool safe(int row, int column, vector<vector<int>> & board, int n){
    int x = row;
    int y = column;
    //  Check for same row:
    while(y >= 0) if(board[x][y--] == 1) return false;
    x = row;
    y = column;
    //  Check for diagnol (left, Up):
    while(x >= 0 && y >= 0) if(board[x--][y--] == 1) return false;
    x = row;
    y = column;
    //  Check for diagonal (left, Down):
    while(x < n && y >= 0) if(board[x++][y--] == 1) return false;
    return true;
}

void solve(int column, vector<vector<int>> & board, vector<vector<int>> & answer, int n){
    if(column == n){
        addSolution(board, answer, n);
        return;
    }
    for(int row=0;row<n;++row){
        if(safe(row, column, board, n)){
            board[row][column] = 1;
            solve(column+1, board, answer, n);
            board[row][column] = 0;
        }
    }
}
vector<vector<int>> nQueens(int n){
    vector<vector<int>> board(n, vector<int> (n, 0));
    vector<vector<int>> answer;
    solve(0, board, answer, n);
    return answer;
}
TC -> O(N!)  For the first row, we check N columns; for the second row, we check the N - 1 column and so on. Hence, the time complexity will be N * (N-1) * (N-2) â€¦. i.e. O(N!)
SC - O(N*N)

OPTIMISED N QUEEN PROBLEM USING HASHMAP
unordered_map<int,bool> rowCheck;
    unordered_map<int,bool> upperLeftDiagnolCheck;
    unordered_map<int,bool> bottomLeftDiagnolCheck;

    bool isSafe(vector<string> &board, int row, int col, int n) {
        if(rowCheck[row] == true )
            return false;
        if(upperLeftDiagnolCheck[n-1+col-row] == true)
            return false;
        if(bottomLeftDiagnolCheck[row+col] == true)
            return false;
        return true;
    }
    void solve(vector<vector<string>> &ans, vector<string> &board, int n, int col){
        // base case
        if(col==n){
            // answer store
            ans.push_back(board);
            //return
            return;
        }
        for(int row = 0 ; row<n; row++){
            if(isSafe(board,row, col,n)){
                // action
                board[row][col] = 'Q';
                rowCheck[row] = true;
                upperLeftDiagnolCheck[n-1+col-row] = true;
                bottomLeftDiagnolCheck[row+col] = true;
                // recursive 
                solve(ans,board, n, col+1);
                // back track
                board[row][col] = '.';
                rowCheck[row] = false;
                upperLeftDiagnolCheck[n-1+col-row] = false;
                bottomLeftDiagnolCheck[row+col] = false;
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        // board
        vector<string> board(n);
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i].push_back('.');
            }
        }
        vector<vector<string>> ans;
        int col = 0;
        solve(ans, board, n, col);
        return ans;
    }

3) SUDOKU SOLVER
bool ispossible(vector<vector<int>>& sudoku,int row, int col, int value){
    for(int i=0; i<9; ++i){
        if(sudoku[row][i]==value){ // checkfor row
            return false;
        }
        if(sudoku[i][col]==value){ // check for column
            return false;
        }
        if(sudoku[3*(row/3)+i/3][3*(col/3)+i%3]==value){
            return false;
        }
    }
    return true;
}

bool solve(vector<vector<int>>& sudoku){
    for(int i=0; i<9; i++){ // for every row
        for(int j=0; j<9; j++){ // for every col
            if(sudoku[i][j]==0){ // if it is empty
                for(int k=1; k<=9; k++){ // try to fill with all possible values from 1-9
                    if(ispossible(sudoku,i,j,k)){ // check before filling
                        sudoku[i][j]=k; //place it there
                        if(solve(sudoku))  return true;  // solve other empty cells
                        else sudoku[i][j]=0; // not valid mark it empty again
                    }
                }
                return false;
            }
        }
    }
    return true;
}

void solveSudoku(vector<vector<int>>& sudoku){
     solve(sudoku);
}
TC - pow(9,y)     y=no of empty cells with value 0
SC - O(1)         at max 9x9=81 cels be empty & 81 stack space be needed so atmax O(81)=>O(1)

4) COMBINATION SUM
void solve(vector<int>&cand,vector<vector<int>>&ans,vector<int>&temp,int target,int indx){
         //base case
         if(indx==cand.size()){
            if(target==0) ans.push_back(temp);
            return;
         }
         //take it multiple tyms
         if(target>=cand[indx]){
             temp.push_back(cand[indx]);
             solve(cand,ans,temp,target-cand[indx],indx);
             temp.pop_back();
         }
             solve(cand,ans,temp,target,indx+1);
    }

    vector<vector<int>> combinationSum(vector<int>&cand, int target) {
        vector<vector<int>>ans;
        vector<int>temp;
        solve(cand,ans,temp,target,0);
        return ans;
    }
TC - O(N * 2^N)
SC - O(N)

5) WORD SEARCH
    bool check(int i, int row, int col, vector<vector<char>> & board, const string& word){
        if(i == word.size()){
            return true;
        }
        if(row < 0 || row == board.size() || col < 0 || col == board[0].size() || word[i] != board[row][col]){
            return false;
        }
        char ch = board[row][col];
        board[row][col] = '#';
        bool res = check(i + 1, row + 1, col, board, word) ||
        check(i + 1, row - 1, col, board, word) ||
        check(i + 1, row, col + 1, board, word) ||
        check(i + 1, row, col - 1, board, word);
        board[row][col] = ch;
        return res;
    }
    bool exist(vector<vector<char>>& board, string word) {
        for(int row = 0; row < board.size(); row++){
            for(int col = 0; col < board[0].size(); col++){
                if(check(0, row, col, board, word)){
                    return true;
                }
            }
        }
        return false;
    }

TC - O(M * N * 4^L)     L = length of word 
SC - O(L) 

6) Largest number in K swaps
    void helper(string s,string &largestNumber,int k,int idx){
        // agar number of swaps khatam hogaye toh return hojao
        if(k==0) return;
        int n = s.size();
        // current string ka first character hum maan rahe hai ki largest character hai string mein
        char maxChar = s[idx];
        // ab string mein aage traverse karke find karne ki koshish karenge ki current max character max hai ya aage koyi aur character hai jo ki maximum character ban sakta hai toh usse appne paas rakhlenge
        for(int i=idx+1;i<n;i++){
            if(maxChar<s[i])
                maxChar = s[i];
        }
        // agar current character jisse humne max character maana tha intially maximum character nahi hai toh iska matlab swap karna padega
        if(maxChar!=s[idx])
            k--;
        for(int i=idx;i<n;i++){
            // ab hum string mein traverse karke maximum character ki position tak jaayenge and phir current character and maximum character
            // ko swap karke check karenge ki current string maximum hai ya phir largestNumber waala string maximum hai
            if(s[i]==maxChar){
                swap(s[i],s[idx]);
                if(s.compare(largestNumber)>0)
                    largestNumber = s;
                helper(s,largestNumber,k,idx+1);
                // backtracking step
                swap(s[i],s[idx]);
            }
        }
    }
    
    
    string findMaximumNum(string str, int k){
    //   Hum initially yehi maan kar chal rahe hai ki hamara given string hi maximum string hai
       string largestNumber = str;
       helper(str,largestNumber,k,0);
       return largestNumber;
    }
TC - O(N!/(N-K)!)
SC - O(N)
