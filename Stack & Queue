1) Next Greater Element to Right
vector<long long> nextLargerElement(vector<long long> arr, int n){
        stack<long long>st;
        vector<long long>ngr(n,-1);
        st.push(arr[n-1]);
        for(int i=n-2;i>=0;i--){
            while(st.size() && st.top()<=arr[i]){
                st.pop();
            }
            if(!st.empty()){
               ngr[i]=st.top();  
            }
            st.push(arr[i]);
        }
        return ngr;
    }
TC - O(N)
SC - O(N)

Similarly for Nearest greater element to left

2) Nearest smaller element to right
    vector<int> help_classmate(vector<int> arr, int n) { 
        vector<int>vec(n,-1);
        stack<int>st;
        for(int i=n-1;i>=0;i--){
                while(st.size()>0 && st.top()>=arr[i] ){
                    st.pop();
                }
                if(st.size()) vec[i]=st.top(); 
                st.push(arr[i]);
        }
        return vec;
    } 
Similarly for Nearest smaller element to left

3) Stock span problem
 vector <int> calculateSpan(int arr[], int n){
         vector<int> vec;
         stack<pair<int,int>>st;
         for(int i=0;i<n;i++){
             if(st.size()==0)  vec.push_back(i+1);   // indx - (-1) == indx + 1
             else if(st.size()>0 && st.top().first>arr[i])  vec.push_back(i-st.top().second);
             else{
                  while(st.size()>0 && st.top().first<=arr[i]) { st.pop();  }
                  if(st.size()==0) vec.push_back(i+1);
                  else if(st.size()>0 && st.top().first>arr[i]) vec.push_back(i-st.top().second);
             }
             st.push({arr[i],i});
             }
         return vec;
    }

4) Maximum Rectangular Area in a Histogram
    long long getMaxArea(long long arr[], int n){
        //NSL
        vector<long long>nsl(n,-1);
        stack<long long>s;
        for(long long i=0;i<n;i++){
            while(s.size()>0 && arr[s.top()]>=arr[i])
                s.pop();
            if(!s.empty()) nsl[i]=s.top();
            s.push(i);
        }
        
        while(!s.empty()){
            s.pop();
        }
         
         //NSR
        vector<long long>nsr(n,n);
        for(long long i=n-1;i>=0;i--){
            while(s.size()>0 && arr[s.top()]>=arr[i])
                  s.pop();
            if(!s.empty()) nsr[i]=s.top();
            s.push(i);
        }
         
         long long maxArea=-1;
         for(long long i=0;i<n;i++){
             long long width=nsr[i]-nsl[i]-1;
             long long temp=width*arr[i];
             if(maxArea<temp) maxArea=temp;
         }
         return maxArea;
    }

5) MAX RECTANGULAR AREA IN BINARY MATRIX
 int MAH(vector<int>vec){
        //NSL
        vector<long long>nsl(n,-1);
        stack<long long>s;
        for(long long i=0;i<n;i++){
            while(s.size()>0 && arr[s.top()]>=arr[i])
                s.pop();
            if(!s.empty()) nsl[i]=s.top();
            s.push(i);
        }
        
        while(!s.empty()){
            s.pop();
        }
         
         //NSR
        vector<long long>nsr(n,n);
        for(long long i=n-1;i>=0;i--){
            while(s.size()>0 && arr[s.top()]>=arr[i])
                  s.pop();
            if(!s.empty()) nsr[i]=s.top();
            s.push(i);
        }
         
         long long maxArea=-1;
         for(long long i=0;i<n;i++){
             long long width=nsr[i]-nsl[i]-1;
             long long temp=width*arr[i];
             if(maxArea<temp) maxArea=temp;
         }
         return maxArea;
    }
    
    int maxArea(int M[MAX][MAX], int n, int m) {
        vector<int>v;
        int mx;
        for(int j=0;j<m;j++) v.push_back(M[0][j]);  //1x0 1D row
        mx=MAH(v);
          
        for(int i=1;i<n;i++){      //for rest rows 
            for(int j=0;j<m;j++){
                 if(M[i][j]==0) v[j]=0;
                 else {
                     v[j]+=M[i][j];
                 }
            }
             mx=max(mx,MAH(v));
        }
        return mx;
    }

6) Trapping Rain Water

long long trappingWater(int arr[], int n){
         vector<int>maxLeft(n,0),maxRight(n,0);
         maxLeft[0]=arr[0];
         maxRight[n-1]=arr[n-1];
         for(long long i=1;i<n;i++){
             maxLeft[i]=max(maxLeft[i-1],arr[i]);
         }
         for(long long i=n-2;i>=0;i--){
             maxRight[i]=max(maxRight[i+1],arr[i]);
         }
         long long ans=0;
         for(long long i=0;i<n;i++){
             ans+=min(maxLeft[i],maxRight[i])-arr[i];
         }
         return ans;
    }

7) Minimum Element in Stack with Extra space
