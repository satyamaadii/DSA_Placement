ADITYA VERMA
1) Next Greater Element to Right
vector<long long> nextLargerElement(vector<long long> arr, int n){
        stack<long long>st;
        vector<long long>ngr(n,-1);
        st.push(arr[n-1]);
        for(int i=n-2;i>=0;i--){
            while(st.size() && st.top()<=arr[i]){
                st.pop();
            }
            if(!st.empty()){
               ngr[i]=st.top();  
            }
            st.push(arr[i]);
        }
        return ngr;
    }
TC - O(N)
SC - O(N)

Similarly for Nearest greater element to left

2) Nearest smaller element to right
    vector<int> help_classmate(vector<int> arr, int n) { 
        vector<int>vec(n,-1);
        stack<int>st;
        for(int i=n-1;i>=0;i--){
                while(st.size()>0 && st.top()>=arr[i] ){
                    st.pop();
                }
                if(st.size()) vec[i]=st.top(); 
                st.push(arr[i]);
        }
        return vec;
    } 
Similarly for Nearest smaller element to left
TC - O(N)
SC - O(N)

3) Stock span problem
 vector <int> calculateSpan(int arr[], int n){
         vector<int> vec;
         stack<pair<int,int>>st;
         for(int i=0;i<n;i++){
             if(st.size()==0)  vec.push_back(i+1);   // indx - (-1) == indx + 1
             else if(st.size()>0 && st.top().first>arr[i])  vec.push_back(i-st.top().second);
             else{
                  while(st.size()>0 && st.top().first<=arr[i]) { st.pop();  }
                  if(st.size()==0) vec.push_back(i+1);
                  else if(st.size()>0 && st.top().first>arr[i]) vec.push_back(i-st.top().second);
             }
             st.push({arr[i],i});
             }
         return vec;
    }
TC - O(N)
SC - O(N)

4) Maximum Rectangular Area in a Histogram
    long long getMaxArea(long long arr[], int n){
        //NSL
        vector<long long>nsl(n,-1);
        stack<long long>s;
        for(long long i=0;i<n;i++){
            while(s.size()>0 && arr[s.top()]>=arr[i])
                s.pop();
            if(!s.empty()) nsl[i]=s.top();
            s.push(i);
        }
        
        while(!s.empty()){
            s.pop();
        }
         
         //NSR
        vector<long long>nsr(n,n);
        for(long long i=n-1;i>=0;i--){
            while(s.size()>0 && arr[s.top()]>=arr[i])
                  s.pop();
            if(!s.empty()) nsr[i]=s.top();
            s.push(i);
        }
         
         long long maxArea=-1;
         for(long long i=0;i<n;i++){
             long long width=nsr[i]-nsl[i]-1;
             long long temp=width*arr[i];
             if(maxArea<temp) maxArea=temp;
         }
         return maxArea;
    }
TC - O(N)
SC - O(N)

5) MAX RECTANGULAR AREA IN BINARY MATRIX
 int MAH(vector<int>vec){
        //NSL
        vector<long long>nsl(n,-1);
        stack<long long>s;
        for(long long i=0;i<n;i++){
            while(s.size()>0 && arr[s.top()]>=arr[i])
                s.pop();
            if(!s.empty()) nsl[i]=s.top();
            s.push(i);
        }
        
        while(!s.empty()){
            s.pop();
        }
         
         //NSR
        vector<long long>nsr(n,n);
        for(long long i=n-1;i>=0;i--){
            while(s.size()>0 && arr[s.top()]>=arr[i])
                  s.pop();
            if(!s.empty()) nsr[i]=s.top();
            s.push(i);
        }
         
         long long maxArea=-1;
         for(long long i=0;i<n;i++){
             long long width=nsr[i]-nsl[i]-1;
             long long temp=width*arr[i];
             if(maxArea<temp) maxArea=temp;
         }
         return maxArea;
    }
    
    int maxArea(int M[MAX][MAX], int n, int m) {
        vector<int>v;
        int mx;
        for(int j=0;j<m;j++) v.push_back(M[0][j]);  //1x0 1D row
        mx=MAH(v);
          
        for(int i=1;i<n;i++){      //for rest rows 
            for(int j=0;j<m;j++){
                 if(M[i][j]==0) v[j]=0;
                 else {
                     v[j]+=M[i][j];
                 }
            }
             mx=max(mx,MAH(v));
        }
        return mx;
    }
TC - O(N)
SC - O(N)

6) Trapping Rain Water
long long trappingWater(int arr[], int n){
         vector<int>maxLeft(n,0),maxRight(n,0);
         maxLeft[0]=arr[0];
         maxRight[n-1]=arr[n-1];
         for(long long i=1;i<n;i++){
             maxLeft[i]=max(maxLeft[i-1],arr[i]);
         }
         for(long long i=n-2;i>=0;i--){
             maxRight[i]=max(maxRight[i+1],arr[i]);
         }
         long long ans=0;
         for(long long i=0;i<n;i++){
             ans+=min(maxLeft[i],maxRight[i])-arr[i];
         }
         return ans;
    }
TC - O(N)
SC - O(N)

7) Minimum Element in Stack with Extra space
stack<int>ss;  // supporting stack
void push(stack<int>& s, int a){
	if(s.empty() || ss.top()>=a)  ss.push(a);
    s.push(a);
}

bool isFull(stack<int>& s,int n){
	return s.size()==n;
}

bool isEmpty(stack<int>& s){
	return s.empty();
}

int pop(stack<int>& s){
	int a= s.top();
	s.pop();
	if(a==ss.top()) ss.pop();
	return a;
}

int getMin(stack<int>& s){
    if(ss.size()) return ss.top();
    return -1;
}

TC - O(N)
SC - O(N)

8)  Minimum Element in Stack in O(1) space i.e. using a variable
int minelem;
void push(stack<int>& s, int a){
	if(s.empty()){
	    minelem=a;
	    s.push(a);
	}
	else if(minelem>=a){
	     int flagValue=2*a-minelem; // this flag value is less than new minmelem
	     s.push(flagValue); 
	     minelem=a;
	}
	else{
	    s.push(a);
	}
}

bool isFull(stack<int>& s,int n){
	return s.size()==n;
}

bool isEmpty(stack<int>& s){
	return s.empty();
}

int pop(stack<int>& s){
        if(s.empty()) return -1;
	int a=s.top();
	s.pop();
	if(a<=minelem){
	    int actualValue=(minelem+a)/2;
            int previousMinValue=2*minm-a;
            minm=previousMinValue;
	    return actualValue;
	}
	return a;
}

int top() {
        if(!s.empty()) {
            int a=s.top();
            if(a<=minm){
                return minm;
            }
            return a;
        };
        return -1;
    }

int getMin(stack<int>& s){
    if(s.empty()) return -1;
    return minelem;
}
TC - O(N)
SC - O(1)

LOVE BABBAR PROBLEMS 
STACK - LAST IN FIRST OUT DATA STRUCTURES (LIFO)
Operations using STL- s.push(), s.pop(), s.top(), s.empty(), s.size()

IMPLEMENTING STACK USING ARRAY
class Stack{
public:
// properties
   int *arr;  
   int top;
   int size;

// behaviour
   Stack (int size){
      this->size=size;
      arr = new int[size];
      top = -1;
   }

   void push(int element){
        if(size-top>1){
            top++;
            arr[top]=element;
        }
        else{
            cout<<"STACK OVERFLOW"<<endl;
        }
    }
    
    void pop(){
        if(top>=0){
            top--;
        }
        else{
            cout<<"STACK UNDERFLOW"<<endl;
        }
    }
    
    int peek(){
        if(top>=0){
            return arr[top];
        }
        else{
            cout<<"STACK IS EMPTY"<<endl;
        }
    }
    
    bool isEmpty(){
         if(top==-1) return true;
         else return false;
    }
};

IMPLEMENTING STACK USING LINKED LIST
class Stack{
    public:
    int val;
    Stack* next;

    Stack(int d){
        this -> val = d;
        this -> next = NULL;
    }
    
    void push(int element,Stack* &head,Stack* &tail){
        Stack *newNode = new Stack(element);
        if( head == NULL){
            //first element push
            head = newNode;
            tail = newNode;
            return;
        }else{
            //assuming element is present
            tail -> next = newNode;
            tail = newNode;
        }
    }

    void pop(Stack* &head,Stack* &tail){
        if( head == NULL){
            //if no element is present
            cout << "Stack Underflow "<<endl;
        }else{
            //edge case for last element
            if( head == tail){
                head = NULL;
                return;
            }
            Stack* temp = head;
            while( temp -> next != tail){
                temp = temp -> next;
            }
            temp -> next = NULL;
            tail = temp;

        }
    }

    int peek(Stack* &tail){
        if( tail == NULL){
            cout << "Stack Underflow " << endl;
        }else{
            return tail -> val;
        }
    }

    bool isEmpty(Stack* &head){
        if( head == NULL){
            return true;
        }else return false;
    }
};

1) Two Stacks
class TwoStack {
    int *arr;
    int top1;
    int top2;
    int size;
public:
    // Initialize TwoStack.
    TwoStack(int s) {
        this->size =s;
        top1=-1;
        top2=size;
        arr = new int[s];
    }
    
    void push1(int num) {
        if(top2-top1 > 1){
            top1++;
            arr[top1]=num;
        }
    }

    void push2(int num) {
         if(top2-top1 > 1){
            top2--;
            arr[top2]=num;
        }
    }

    int pop1() {
        if(top1>=0){
            int ans = arr[top1];
            top1--;
            return ans;
        }
        else{
            return -1;
        }
    }

    int pop2() {
        if(top2<size){
            int ans = arr[top2];
            top2++;
            return ans;
        }
        else{
            return -1;
        }
    }
};

2) CELEBRITY PROBLEM
    int celebrity(vector<vector<int>>& matrix, int n){
        stack<int>s;
        for(int i=0;i<n;i++){
            s.push(i);
        }
        while(s.size()>1){
            int a=s.top();
            s.pop();
            int b=s.top();
            s.pop();
            if(matrix[a][b]==1){
                s.push(b);
            }
            else{
                s.push(a);
            }
        }
        int c=s.top();  //check the possible candidate
        int rowZeroes=0,colOne=0;
        for(int j=0;j<n;j++){
            if(matrix[c][j]==0) rowZeroes++;
        }
        for(int i=0;i<n;i++){
             if(matrix[i][c]==1) colOne++;
        }
        if(rowZeroes==n && colOne==n-1) return c;
        return -1;
    }
TC - O(N)
SC - O(N)

3) Minimum Cost To Make String Valid
int findMinimumCost(string str) {
  stack<char> s;
  if (str.size() % 2 == 1)
      return -1; // ODD SIZE NOT POSSIBLE 
  for (int i = 0; i < str.size(); i++) {
    if (str[i] == '{') s.push(str[i]);
    else {
      if (!s.empty() && s.top() == '{') s.pop();
      else s.push(str[i]);
    }
  }
  // stack s contains invalid strings
  int a = 0, b = 0;
  while (!s.empty()) {
    if (s.top() == '{') a++;
    else b++;
    s.pop();
  }
  return (a + 1) / 2 + (b + 1) / 2;
}
TC - O(N)
SC - O(N)

4) Insert An Element At Its Bottom In A Given Stack
void solve(stack<int>& myStack, int x){
    //Base Case
    if(myStack.size()==0) {
        myStack.push(x);
        return;
    }
    else{
        int num=myStack.top();
        myStack.pop();
        solve(myStack,x);
        myStack.push(num);
    }
}
stack<int> pushAtBottom(stack<int>& myStack, int x) {
    solve(myStack,x);
    return myStack;
}
TC - O(N)
SC - O(N)

5)  Reverse Stack Using Recursion 
void insertAtBottom(stack<int>&stack, int ele){
    if(stack.empty()){
        stack.push(ele);
        return;
    }
    int Top = stack.top();
    stack.pop();
    insertAtBottom(stack, ele);
    stack.push(Top);
}

void reverseStack(stack<int> &stack) {
    if(stack.empty() || stack.size() == 1) return;
    int element = stack.top();
    stack.pop();
    reverseStack(stack);
    insertAtBottom(stack, element);
}
TC - O(N*N)
SC - O(N)

6)  Delete middle element from stack
void solve(stack<int>&inputStack, int N, int count ){
   if(count == N/2){
      inputStack.pop();
      return;
   }
   int num = inputStack.top();
   inputStack.pop();
   solve(inputStack, N, count+1);
   inputStack.push(num);
}

void deleteMiddle(stack<int>&inputStack, int N){
   int count = 0;
   solve(inputStack, N , count);  
}
TC - O(N)
SC - O(N)

7)  Sort a Stack
void Sorted(stack<int> &s,int num){
    if(s.empty()){
        s.push(num);
        return;
    }
    if(s.top()<num){
        s.push(num);
        return;
    }
    int l=s.top();
    s.pop();
    Sorted(s,num);
    s.push(l);
}

void sortStack(stack<int> &s){
    if(s.empty()) return;
    int num=s.top();
    s.pop();
    sortStack(s);
    Sorted(s,num);
}
TC - O(N*N)
SC - O(N)

8) VALID PARANTHESIS
bool isValidParenthesis(string str){       
        stack<char>s;       
        for(int i=0;i<str.length();i++){
            char ch=str[i];
            if(ch=='(' || ch=='{' || ch=='[') s.push(ch);
            else{
                if(!s.empty()){
                    char top=s.top();
                    if((top=='(' && ch==')') || (top=='{' && ch=='}') && (top=='[' && ch==']'))  s.pop();
                    else  return false;
                }
            }
        }
        return s.empty();
}
TC - O(N)
SC - O(N)

9) Redundant Brackets
bool findRedundantBrackets(string &s){
    stack<char> st;
    int i = 0;
    while(i != s.size()){
        if(s[i] != ')') st.push(s[i]);
        else if(s[i] == ')'){
            if(st.empty()) return true; // useless closing bracket so true
            int operatorCount = 0;
            while(st.top() != '('){
                if(st.top() == '+' || st.top() == '-' || st.top() == '*' || st.top() == '/') operatorCount++;
                st.pop();
            }
            st.pop();
            if(operatorCount == 0) return true;  // useless closing bracket so true
        }
        i++;
    }
    return false;
}
TC - O(N)
SC - O(N)

10)  N Stacks In An Array    ( watch video to understand)  https://www.youtube.com/watch?v=lrSXKLmnMV8&list=PLDzeHZWIZsTrhXYYtx4z8-u8zA-DzuVsj&index=5&ab_channel=CodeHelp-byBabbar
class NStack {
    int *arr;
    int *top;
    int *next;
    int n,s;
    int freespot;
public:
  NStack(int N, int S) { // INITIALIZE
   n=N; s=S;
   arr=new int[s];
   top=new int[n];
   next=new int [s];
  for( int i=0;i<n;i++){
      top[i]=-1;
  }
  for (int i = 0; i < s; i++) {
      next[i] = i + 1;
  }
  next[s - 1] = -1;
  freespot = 0;
}
  bool push(int x, int m) {
    if(freespot==-1) return false;
    int idx=freespot;
    freespot=next[idx];
    arr[idx]=x;
    next[idx]=top[m-1];
    top[m-1]=idx;
    return true;
  }
  int pop(int m) {
    if(top[m-1]==-1) return -1;
    int idx=top[m-1];
    top[m-1]=next[idx];
    next[idx]=freespot;
    freespot=idx;
    return arr[idx];
  }
};
